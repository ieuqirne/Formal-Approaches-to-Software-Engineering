(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type short_short_integer =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_short_integer__ref =
  { mutable short_short_integer__content : short_short_integer }
 
 function short_short_integer__ref_short_short_integer__content__projection 
   (a : short_short_integer__ref) : short_short_integer =
  a.short_short_integer__content
 
 meta "model_projection" function short_short_integer__ref_short_short_integer__content__projection
 
 meta "inline:no" function short_short_integer__ref_short_short_integer__content__projection
 
 val short_short_integer__havoc 
   (x : short_short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer__rep
 use        Standard__short_short_integer as Standard__short_short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__short_short_integer.short_short_integer) : int =
  (Standard__short_short_integer.short_short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__short_short_integer.short_short_integer, 
 predicate in_range = Standard__short_short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type short_integer =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_integer__ref =
  { mutable short_integer__content : short_integer }
 
 function short_integer__ref_short_integer__content__projection 
   (a : short_integer__ref) : short_integer =
  a.short_integer__content
 
 meta "model_projection" function short_integer__ref_short_integer__content__projection
 
 meta "inline:no" function short_integer__ref_short_integer__content__projection
 
 val short_integer__havoc 
   (x : short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer__rep
 use        Standard__short_integer as Standard__short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__short_integer.short_integer) : int =
  (Standard__short_integer.short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__short_integer.short_integer, 
 predicate in_range = Standard__short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer__ref =
  { mutable integer__content : integer }
 
 function integer__ref_integer__content__projection 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref_integer__content__projection
 
 meta "inline:no" function integer__ref_integer__content__projection
 
 val integer__havoc 
   (x : integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
 use        Standard__integer as Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer.integer) : int =
  (Standard__integer.integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer.integer, 
 predicate in_range = Standard__integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type long_integer =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_integer__ref =
  { mutable long_integer__content : long_integer }
 
 function long_integer__ref_long_integer__content__projection 
   (a : long_integer__ref) : long_integer =
  a.long_integer__content
 
 meta "model_projection" function long_integer__ref_long_integer__content__projection
 
 meta "inline:no" function long_integer__ref_long_integer__content__projection
 
 val long_integer__havoc 
   (x : long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer__rep
 use        Standard__long_integer as Standard__long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__long_integer.long_integer) : int =
  (Standard__long_integer.long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__long_integer.long_integer, 
 predicate in_range = Standard__long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type long_long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_long_integer__ref =
  { mutable long_long_integer__content : long_long_integer }
 
 function long_long_integer__ref_long_long_integer__content__projection 
   (a : long_long_integer__ref) : long_long_integer =
  a.long_long_integer__content
 
 meta "model_projection" function long_long_integer__ref_long_long_integer__content__projection
 
 meta "inline:no" function long_long_integer__ref_long_long_integer__content__projection
 
 val long_long_integer__havoc 
   (x : long_long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer__rep
 use        Standard__long_long_integer as Standard__long_long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__long_long_integer.long_long_integer) : int =
  (Standard__long_long_integer.long_long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__long_long_integer.long_long_integer, 
 predicate in_range = Standard__long_long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type natural =
  < range 0 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type natural__ref =
  { mutable natural__content : natural }
 
 function natural__ref_natural__content__projection 
   (a : natural__ref) : natural =
  a.natural__content
 
 meta "model_projection" function natural__ref_natural__content__projection
 
 meta "inline:no" function natural__ref_natural__content__projection
 
 val natural__havoc 
   (x : natural__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural__rep
 use        Standard__natural as Standard__natural
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__natural.natural) : int =
  (Standard__natural.natural'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__natural.natural, 
 predicate in_range = Standard__natural.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type positive =
  < range 1 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive__ref =
  { mutable positive__content : positive }
 
 function positive__ref_positive__content__projection 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref_positive__content__projection
 
 meta "inline:no" function positive__ref_positive__content__projection
 
 val positive__havoc 
   (x : positive__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive__rep
 use        Standard__positive as Standard__positive
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__positive.positive) : int =
  (Standard__positive.positive'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__positive.positive, 
 predicate in_range = Standard__positive.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32

 type short_float 
 
 val constant first 
   : Float32.t
  ensures { result =  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t)) }
 
 val constant last 
   : Float32.t
  ensures { result =  (340282346638528859811704183484516925440.0:Float32.t) }
 
 predicate in_range 
   (x : Float32.t) =
  (Float32.t'isFinite x)
 val in_range 
   (x : Float32.t) : bool
  ensures { result <-> in_range (x : Float32.t) }
 
 clone export "ada__model".Static_Float32 with axiom .,
 type t = short_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_float__ref =
  { mutable short_float__content : short_float }
 
 function short_float__ref_short_float__content__projection 
   (a : short_float__ref) : short_float =
  a.short_float__content
 
 meta "model_projection" function short_float__ref_short_float__content__projection
 
 meta "inline:no" function short_float__ref_short_float__content__projection
 
 val short_float__havoc 
   (x : short_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float__rep
 use        Standard__short_float as Standard__short_float
 use        "_gnatprove_standard".Float32 as Float32
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float32 with axiom .,
 type t = Standard__short_float.short_float, 
 predicate in_range = Standard__short_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32

 type float__ 
 
 val constant first 
   : Float32.t
  ensures { result =  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t)) }
 
 val constant last 
   : Float32.t
  ensures { result =  (340282346638528859811704183484516925440.0:Float32.t) }
 
 predicate in_range 
   (x : Float32.t) =
  (Float32.t'isFinite x)
 val in_range 
   (x : Float32.t) : bool
  ensures { result <-> in_range (x : Float32.t) }
 
 clone export "ada__model".Static_Float32 with axiom .,
 type t = float__, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type float____ref =
  { mutable float____content : float__ }
 
 function float____ref_float____content__projection 
   (a : float____ref) : float__ =
  a.float____content
 
 meta "model_projection" function float____ref_float____content__projection
 
 meta "inline:no" function float____ref_float____content__projection
 
 val float____havoc 
   (x : float____ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float__rep
 use        Standard__float as Standard__float
 use        "_gnatprove_standard".Float32 as Float32
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float32 with axiom .,
 type t = Standard__float.float__, 
 predicate in_range = Standard__float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float64 as Float64

 type long_float 
 
 val constant first 
   : Float64.t
  ensures { result =  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)) }
 
 val constant last 
   : Float64.t
  ensures { result =  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t) }
 
 predicate in_range 
   (x : Float64.t) =
  (Float64.t'isFinite x)
 val in_range 
   (x : Float64.t) : bool
  ensures { result <-> in_range (x : Float64.t) }
 
 clone export "ada__model".Static_Float64 with axiom .,
 type t = long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_float__ref =
  { mutable long_float__content : long_float }
 
 function long_float__ref_long_float__content__projection 
   (a : long_float__ref) : long_float =
  a.long_float__content
 
 meta "model_projection" function long_float__ref_long_float__content__projection
 
 meta "inline:no" function long_float__ref_long_float__content__projection
 
 val long_float__havoc 
   (x : long_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float__rep
 use        Standard__long_float as Standard__long_float
 use        "_gnatprove_standard".Float64 as Float64
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float64 with axiom .,
 type t = Standard__long_float.long_float, 
 predicate in_range = Standard__long_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (255 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type character__ref =
  { mutable character__content : character }
 
 function character__ref_character__content__projection 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref_character__content__projection
 
 meta "inline:no" function character__ref_character__content__projection
 
 val character__havoc 
   (x : character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
 use        Standard__character as Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__character.character, 
 predicate in_range = Standard__character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type wide_character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (65535 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_character__ref =
  { mutable wide_character__content : wide_character }
 
 function wide_character__ref_wide_character__content__projection 
   (a : wide_character__ref) : wide_character =
  a.wide_character__content
 
 meta "model_projection" function wide_character__ref_wide_character__content__projection
 
 meta "inline:no" function wide_character__ref_wide_character__content__projection
 
 val wide_character__havoc 
   (x : wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character__rep
 use        Standard__wide_character as Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__wide_character.wide_character, 
 predicate in_range = Standard__wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type wide_wide_character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_wide_character__ref =
  { mutable wide_wide_character__content : wide_wide_character }
 
 function wide_wide_character__ref_wide_wide_character__content__projection 
   (a : wide_wide_character__ref) : wide_wide_character =
  a.wide_wide_character__content
 
 meta "model_projection" function wide_wide_character__ref_wide_wide_character__content__projection
 
 meta "inline:no" function wide_wide_character__ref_wide_wide_character__content__projection
 
 val wide_wide_character__havoc 
   (x : wide_wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character__rep
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__wide_wide_character.wide_wide_character, 
 predicate in_range = Standard__wide_wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_91   : int.
   (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
    ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_91   : int.
    (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
     ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__character.component_type, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__character.component_type, 
 function to_rep = Standard__character__rep.to_rep, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get, 
 function bool_eq = Array__Int__Standard__character.bool_eq

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer__rep as Standard__integer__rep

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type string__ref =
  { mutable string__content : string }
 
 function string__ref_string__content__projection 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref_string__content__projection
 
 meta "inline:no" function string__ref_string__content__projection
 
 val string__havoc 
   (x : string__ref) : unit
  writes {x}

end

(* Module defining to_string/of_string functions, created in Gnat2Why.Types.Translate_Type *)
module Standard_String__Img
 use        "int".Int
 use        Standard__string as Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 val function to_string 
   (x : Main.__image) (s : int) : Standard__string.string
 
 val function from_string 
   (x : Standard__string.string) : Main.__image
 
 axiom to_string__first :
  (forall x   : Main.__image.
  (forall s   : int [(to_string x s)].
   ((Standard__string.first (to_string x s)) = (1 : int))))
 
 axiom to_string__length :
  (forall x   : Main.__image.
  (forall s   : int [(to_string x s)].
   ( (s >= (0 : int)) -> ((Standard__string.length (to_string x s)) <= s) )))

end

(* Module for axiomatizing the array theory associated to type "wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character as Standard__wide_character
 use        Standard__wide_character__rep as Standard__wide_character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__wide_character.wide_character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_98   : int.
   (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
    ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_98   : int.
    (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
     ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__wide_character.component_type, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character__rep as Standard__wide_character__rep
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__wide_character.component_type, 
 function to_rep = Standard__wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_character.bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__wide_character as Standard__wide_character
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 type component_type =
  Standard__wide_character.wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type wide_string__ref =
  { mutable wide_string__content : wide_string }
 
 function wide_string__ref_wide_string__content__projection 
   (a : wide_string__ref) : wide_string =
  a.wide_string__content
 
 meta "model_projection" function wide_string__ref_wide_string__content__projection
 
 meta "inline:no" function wide_string__ref_wide_string__content__projection
 
 val wide_string__havoc 
   (x : wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        Standard__wide_wide_character__rep as Standard__wide_wide_character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_105   : int.
   (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
    ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_105   : int.
    (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
     ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_wide_character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_wide_character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character__rep as Standard__wide_wide_character__rep
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 function to_rep = Standard__wide_wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_wide_character.bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__wide_wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type wide_wide_string__ref =
  { mutable wide_wide_string__content : wide_wide_string }
 
 function wide_wide_string__ref_wide_wide_string__content__projection 
   (a : wide_wide_string__ref) : wide_wide_string =
  a.wide_wide_string__content
 
 meta "model_projection" function wide_wide_string__ref_wide_wide_string__content__projection
 
 meta "inline:no" function wide_wide_string__ref_wide_wide_string__content__projection
 
 val wide_wide_string__havoc 
   (x : wide_wide_string__ref) : unit
  writes {x}

end

(* Module for fixed-point operation for type at system.ads:1, created in Why.Gen.Scalars.Create_Fixed_Point_Theory_If_Needed *)
module Fixed_Point__1_1000000000
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 function num_small 
   : int =
  (1 : int)
 
 function den_small 
   : int =
  (1000000000 : int)
 
 clone export "ada__model".Fixed_Point_Rep with axiom .,
 function num_small = num_small, 
 function den_small = den_small

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 type duration 
 
 val constant num_small 
   : Main.__fixed
  ensures { result =  (1 : int) }
 
 val constant den_small 
   : Main.__fixed
  ensures { result =  (1000000000 : int) }
 
 val constant first 
   : Main.__fixed
  ensures { result =  ( ( -9223372036854775808 ) : int ) }
 
 val constant last 
   : Main.__fixed
  ensures { result =  ( 9223372036854775807 : int ) }
 
 predicate in_range 
   (x : Main.__fixed) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : Main.__fixed) : bool
  ensures { result <-> in_range (x : Main.__fixed) }
 
 clone export "ada__model".Static_Fixed_Point with axiom .,
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type duration__ref =
  { mutable duration__content : duration }
 
 function duration__ref_duration__content__projection 
   (a : duration__ref) : duration =
  a.duration__content
 
 meta "model_projection" function duration__ref_duration__content__projection
 
 meta "inline:no" function duration__ref_duration__content__projection
 
 val duration__havoc 
   (x : duration__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration__rep
 use        Standard__duration as Standard__duration
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Fixed with axiom .,
 type t = Standard__duration.duration, 
 predicate in_range = Standard__duration.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_8 =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_8__ref =
  { mutable integer_8__content : integer_8 }
 
 function integer_8__ref_integer_8__content__projection 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref_integer_8__content__projection
 
 meta "inline:no" function integer_8__ref_integer_8__content__projection
 
 val integer_8__havoc 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8__rep
 use        Standard__integer_8 as Standard__integer_8
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_8.integer_8) : int =
  (Standard__integer_8.integer_8'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_8.integer_8, 
 predicate in_range = Standard__integer_8.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_16 =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_16__ref =
  { mutable integer_16__content : integer_16 }
 
 function integer_16__ref_integer_16__content__projection 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref_integer_16__content__projection
 
 meta "inline:no" function integer_16__ref_integer_16__content__projection
 
 val integer_16__havoc 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16__rep
 use        Standard__integer_16 as Standard__integer_16
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_16.integer_16) : int =
  (Standard__integer_16.integer_16'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_16.integer_16, 
 predicate in_range = Standard__integer_16.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_32 =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref =
  { mutable integer_32__content : integer_32 }
 
 function integer_32__ref_integer_32__content__projection 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref_integer_32__content__projection
 
 meta "inline:no" function integer_32__ref_integer_32__content__projection
 
 val integer_32__havoc 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32__rep
 use        Standard__integer_32 as Standard__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_32.integer_32) : int =
  (Standard__integer_32.integer_32'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_32.integer_32, 
 predicate in_range = Standard__integer_32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_64 =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_64__ref =
  { mutable integer_64__content : integer_64 }
 
 function integer_64__ref_integer_64__content__projection 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref_integer_64__content__projection
 
 meta "inline:no" function integer_64__ref_integer_64__content__projection
 
 val integer_64__havoc 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64__rep
 use        Standard__integer_64 as Standard__integer_64
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_64.integer_64) : int =
  (Standard__integer_64.integer_64'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_64.integer_64, 
 predicate in_range = Standard__integer_64.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type universal_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type universal_integer__ref =
  { mutable universal_integer__content : universal_integer }
 
 function universal_integer__ref_universal_integer__content__projection 
   (a : universal_integer__ref) : universal_integer =
  a.universal_integer__content
 
 meta "model_projection" function universal_integer__ref_universal_integer__content__projection
 
 meta "inline:no" function universal_integer__ref_universal_integer__content__projection
 
 val universal_integer__havoc 
   (x : universal_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer__rep
 use        Standard__universal_integer as Standard__universal_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__universal_integer.universal_integer) : int =
  (Standard__universal_integer.universal_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__universal_integer.universal_integer, 
 predicate in_range = Standard__universal_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TspeedB" defined at train.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Train__TspeedB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tspeedB =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tspeedB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tspeedB__ref =
  { mutable tspeedB__content : tspeedB }
 
 function tspeedB__ref_tspeedB__content__projection 
   (a : tspeedB__ref) : tspeedB =
  a.tspeedB__content
 
 meta "model_projection" function tspeedB__ref_tspeedB__content__projection
 
 meta "inline:no" function tspeedB__ref_tspeedB__content__projection
 
 val tspeedB__havoc 
   (x : tspeedB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TspeedB" defined at train.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Train__TspeedB__rep
 use        Train__TspeedB as Train__TspeedB
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Train__TspeedB.tspeedB) : int =
  (Train__TspeedB.tspeedB'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Train__TspeedB.tspeedB, 
 predicate in_range = Train__TspeedB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "speed" defined at train.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Train__speed
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type speed =
  < range 0 100 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (100 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = speed, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type speed__ref =
  { mutable speed__content : speed }
 
 function speed__ref_speed__content__projection 
   (a : speed__ref) : speed =
  a.speed__content
 
 meta "model_projection" function speed__ref_speed__content__projection
 
 meta "inline:no" function speed__ref_speed__content__projection
 
 val speed__havoc 
   (x : speed__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "speed" defined at train.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Train__speed__rep
 use        Train__speed as Train__speed
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Train__speed.speed) : int =
  (Train__speed.speed'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Train__speed.speed, 
 predicate in_range = Train__speed.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TweightB" defined at train.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Train__TweightB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tweightB =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tweightB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tweightB__ref =
  { mutable tweightB__content : tweightB }
 
 function tweightB__ref_tweightB__content__projection 
   (a : tweightB__ref) : tweightB =
  a.tweightB__content
 
 meta "model_projection" function tweightB__ref_tweightB__content__projection
 
 meta "inline:no" function tweightB__ref_tweightB__content__projection
 
 val tweightB__havoc 
   (x : tweightB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TweightB" defined at train.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Train__TweightB__rep
 use        Train__TweightB as Train__TweightB
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Train__TweightB.tweightB) : int =
  (Train__TweightB.tweightB'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Train__TweightB.tweightB, 
 predicate in_range = Train__TweightB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "weight" defined at train.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Train__weight
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type weight =
  < range 2000 22000 >
 
 val constant first 
   : int
  ensures { result =  (2000 : int) }
 
 val constant last 
   : int
  ensures { result =  (22000 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = weight, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type weight__ref =
  { mutable weight__content : weight }
 
 function weight__ref_weight__content__projection 
   (a : weight__ref) : weight =
  a.weight__content
 
 meta "model_projection" function weight__ref_weight__content__projection
 
 meta "inline:no" function weight__ref_weight__content__projection
 
 val weight__havoc 
   (x : weight__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "weight" defined at train.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Train__weight__rep
 use        Train__weight as Train__weight
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Train__weight.weight) : int =
  (Train__weight.weight'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Train__weight.weight, 
 predicate in_range = Train__weight.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for defining the constant "reactorweight" defined at train.ads:8, created in Gnat2Why.Decls.Translate_Constant *)
module Train__reactorweight
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant reactorweight [#"train.ads" 8 0 0][@name:ReactorWeight] [@model_trace:2848] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for defining the constant "carriageweight" defined at train.ads:9, created in Gnat2Why.Decls.Translate_Constant *)
module Train__carriageweight
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant carriageweight [#"train.ads" 9 0 0][@model_trace:2858] [@name:CarriageWeight] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for axiomatizing type "TcarriageB" defined at train.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Train__TcarriageB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tcarriageB =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tcarriageB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tcarriageB__ref =
  { mutable tcarriageB__content : tcarriageB }
 
 function tcarriageB__ref_tcarriageB__content__projection 
   (a : tcarriageB__ref) : tcarriageB =
  a.tcarriageB__content
 
 meta "model_projection" function tcarriageB__ref_tcarriageB__content__projection
 
 meta "inline:no" function tcarriageB__ref_tcarriageB__content__projection
 
 val tcarriageB__havoc 
   (x : tcarriageB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TcarriageB" defined at train.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Train__TcarriageB__rep
 use        Train__TcarriageB as Train__TcarriageB
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Train__TcarriageB.tcarriageB) : int =
  (Train__TcarriageB.tcarriageB'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Train__TcarriageB.tcarriageB, 
 predicate in_range = Train__TcarriageB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "carriage" defined at train.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Train__carriage
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type carriage =
  < range 0 10 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (10 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = carriage, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type carriage__ref =
  { mutable carriage__content : carriage }
 
 function carriage__ref_carriage__content__projection 
   (a : carriage__ref) : carriage =
  a.carriage__content
 
 meta "model_projection" function carriage__ref_carriage__content__projection
 
 meta "inline:no" function carriage__ref_carriage__content__projection
 
 val carriage__havoc 
   (x : carriage__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "carriage" defined at train.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Train__carriage__rep
 use        Train__carriage as Train__carriage
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Train__carriage.carriage) : int =
  (Train__carriage.carriage'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Train__carriage.carriage, 
 predicate in_range = Train__carriage.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "statusonoff" defined at reactor.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Reactor__statusonoff
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type statusonoff 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (1 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = statusonoff, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type statusonoff__ref =
  { mutable statusonoff__content : statusonoff }
 
 function statusonoff__ref_statusonoff__content__projection 
   (a : statusonoff__ref) : statusonoff =
  a.statusonoff__content
 
 meta "model_projection" function statusonoff__ref_statusonoff__content__projection
 
 meta "inline:no" function statusonoff__ref_statusonoff__content__projection
 
 val statusonoff__havoc 
   (x : statusonoff__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "statusonoff" defined at reactor.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Reactor__statusonoff__rep
 use        Reactor__statusonoff as Reactor__statusonoff
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Reactor__statusonoff.statusonoff, 
 predicate in_range = Reactor__statusonoff.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TtemperatureB" defined at reactor.ads:10, created in Gnat2Why.Types.Translate_Type *)
module Reactor__TtemperatureB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type ttemperatureB =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = ttemperatureB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type ttemperatureB__ref =
  { mutable ttemperatureB__content : ttemperatureB }
 
 function ttemperatureB__ref_ttemperatureB__content__projection 
   (a : ttemperatureB__ref) : ttemperatureB =
  a.ttemperatureB__content
 
 meta "model_projection" function ttemperatureB__ref_ttemperatureB__content__projection
 
 meta "inline:no" function ttemperatureB__ref_ttemperatureB__content__projection
 
 val ttemperatureB__havoc 
   (x : ttemperatureB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TtemperatureB" defined at reactor.ads:10, created in Gnat2Why.Types.Translate_Type *)
module Reactor__TtemperatureB__rep
 use        Reactor__TtemperatureB as Reactor__TtemperatureB
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Reactor__TtemperatureB.ttemperatureB) : int =
  (Reactor__TtemperatureB.ttemperatureB'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Reactor__TtemperatureB.ttemperatureB, 
 predicate in_range = Reactor__TtemperatureB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "temperature" defined at reactor.ads:10, created in Gnat2Why.Types.Translate_Type *)
module Reactor__temperature
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type temperature =
  < range 0 100 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (100 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = temperature, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type temperature__ref =
  { mutable temperature__content : temperature }
 
 function temperature__ref_temperature__content__projection 
   (a : temperature__ref) : temperature =
  a.temperature__content
 
 meta "model_projection" function temperature__ref_temperature__content__projection
 
 meta "inline:no" function temperature__ref_temperature__content__projection
 
 val temperature__havoc 
   (x : temperature__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "temperature" defined at reactor.ads:10, created in Gnat2Why.Types.Translate_Type *)
module Reactor__temperature__rep
 use        Reactor__temperature as Reactor__temperature
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Reactor__temperature.temperature) : int =
  (Reactor__temperature.temperature'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Reactor__temperature.temperature, 
 predicate in_range = Reactor__temperature.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TrodsB" defined at reactor.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Reactor__TrodsB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type trodsB =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = trodsB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type trodsB__ref =
  { mutable trodsB__content : trodsB }
 
 function trodsB__ref_trodsB__content__projection 
   (a : trodsB__ref) : trodsB =
  a.trodsB__content
 
 meta "model_projection" function trodsB__ref_trodsB__content__projection
 
 meta "inline:no" function trodsB__ref_trodsB__content__projection
 
 val trodsB__havoc 
   (x : trodsB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TrodsB" defined at reactor.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Reactor__TrodsB__rep
 use        Reactor__TrodsB as Reactor__TrodsB
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Reactor__TrodsB.trodsB) : int =
  (Reactor__TrodsB.trodsB'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Reactor__TrodsB.trodsB, 
 predicate in_range = Reactor__TrodsB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "rods" defined at reactor.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Reactor__rods
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type rods =
  < range 1 5 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (5 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = rods, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type rods__ref =
  { mutable rods__content : rods }
 
 function rods__ref_rods__content__projection 
   (a : rods__ref) : rods =
  a.rods__content
 
 meta "model_projection" function rods__ref_rods__content__projection
 
 meta "inline:no" function rods__ref_rods__content__projection
 
 val rods__havoc 
   (x : rods__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "rods" defined at reactor.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Reactor__rods__rep
 use        Reactor__rods as Reactor__rods
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Reactor__rods.rods) : int =
  (Reactor__rods.rods'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Reactor__rods.rods, 
 predicate in_range = Reactor__rods.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "reactorstatus" defined at reactor.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Reactor__reactorstatus
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type reactorstatus 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (1 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = reactorstatus, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type reactorstatus__ref =
  { mutable reactorstatus__content : reactorstatus }
 
 function reactorstatus__ref_reactorstatus__content__projection 
   (a : reactorstatus__ref) : reactorstatus =
  a.reactorstatus__content
 
 meta "model_projection" function reactorstatus__ref_reactorstatus__content__projection
 
 meta "inline:no" function reactorstatus__ref_reactorstatus__content__projection
 
 val reactorstatus__havoc 
   (x : reactorstatus__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "reactorstatus" defined at reactor.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Reactor__reactorstatus__rep
 use        Reactor__reactorstatus as Reactor__reactorstatus
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Reactor__reactorstatus.reactorstatus, 
 predicate in_range = Reactor__reactorstatus.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TpowerB" defined at reactor.ads:3, created in Gnat2Why.Types.Translate_Type *)
module Reactor__TpowerB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tpowerB =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tpowerB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tpowerB__ref =
  { mutable tpowerB__content : tpowerB }
 
 function tpowerB__ref_tpowerB__content__projection 
   (a : tpowerB__ref) : tpowerB =
  a.tpowerB__content
 
 meta "model_projection" function tpowerB__ref_tpowerB__content__projection
 
 meta "inline:no" function tpowerB__ref_tpowerB__content__projection
 
 val tpowerB__havoc 
   (x : tpowerB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TpowerB" defined at reactor.ads:3, created in Gnat2Why.Types.Translate_Type *)
module Reactor__TpowerB__rep
 use        Reactor__TpowerB as Reactor__TpowerB
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Reactor__TpowerB.tpowerB) : int =
  (Reactor__TpowerB.tpowerB'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Reactor__TpowerB.tpowerB, 
 predicate in_range = Reactor__TpowerB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "power" defined at reactor.ads:3, created in Gnat2Why.Types.Translate_Type *)
module Reactor__power
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type power =
  < range 0 5200 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (5200 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = power, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type power__ref =
  { mutable power__content : power }
 
 function power__ref_power__content__projection 
   (a : power__ref) : power =
  a.power__content
 
 meta "model_projection" function power__ref_power__content__projection
 
 meta "inline:no" function power__ref_power__content__projection
 
 val power__havoc 
   (x : power__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "power" defined at reactor.ads:3, created in Gnat2Why.Types.Translate_Type *)
module Reactor__power__rep
 use        Reactor__power as Reactor__power
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Reactor__power.power) : int =
  (Reactor__power.power'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Reactor__power.power, 
 predicate in_range = Reactor__power.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the record theory associated to type "trainreactor" defined at reactor.ads:16, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Reactor__trainreactor__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Reactor__statusonoff as Reactor__statusonoff
 use        Reactor__statusonoff__rep as Reactor__statusonoff__rep
 use        Reactor__temperature as Reactor__temperature
 use        Reactor__temperature__rep as Reactor__temperature__rep
 use        Reactor__rods as Reactor__rods
 use        Reactor__rods__rep as Reactor__rods__rep
 use        Reactor__reactorstatus as Reactor__reactorstatus
 use        Reactor__reactorstatus__rep as Reactor__reactorstatus__rep
 use        Reactor__power as Reactor__power
 use        Reactor__power__rep as Reactor__power__rep

 type __split_fields =
  { rec__reactor__trainreactor__onoff [@model_trace:.3496] [@name:OnOff] : Reactor__statusonoff.statusonoff; rec__reactor__trainreactor__temp [@name:temp] [@model_trace:.3507] : Reactor__temperature.temperature; rec__reactor__trainreactor__rod_number [@name:rod_number] [@model_trace:.3518] : Reactor__rods.rods; rec__reactor__trainreactor__status [@model_trace:.3529] [@name:status] : Reactor__reactorstatus.reactorstatus; rec__reactor__trainreactor__pow [@name:pow] [@model_trace:.3540] : Reactor__power.power }
 
 function __split_fields_rec__reactor__trainreactor__onoff__projection [@model_trace:.3496] [@name:OnOff] 
   (a : __split_fields) : Reactor__statusonoff.statusonoff =
  a.rec__reactor__trainreactor__onoff
 
 meta "model_projection" function __split_fields_rec__reactor__trainreactor__onoff__projection
 
 meta "inline:no" function __split_fields_rec__reactor__trainreactor__onoff__projection
 
 function __split_fields_rec__reactor__trainreactor__temp__projection [@name:temp] [@model_trace:.3507] 
   (a : __split_fields) : Reactor__temperature.temperature =
  a.rec__reactor__trainreactor__temp
 
 meta "model_projection" function __split_fields_rec__reactor__trainreactor__temp__projection
 
 meta "inline:no" function __split_fields_rec__reactor__trainreactor__temp__projection
 
 function __split_fields_rec__reactor__trainreactor__rod_number__projection [@name:rod_number] [@model_trace:.3518] 
   (a : __split_fields) : Reactor__rods.rods =
  a.rec__reactor__trainreactor__rod_number
 
 meta "model_projection" function __split_fields_rec__reactor__trainreactor__rod_number__projection
 
 meta "inline:no" function __split_fields_rec__reactor__trainreactor__rod_number__projection
 
 function __split_fields_rec__reactor__trainreactor__status__projection [@model_trace:.3529] [@name:status] 
   (a : __split_fields) : Reactor__reactorstatus.reactorstatus =
  a.rec__reactor__trainreactor__status
 
 meta "model_projection" function __split_fields_rec__reactor__trainreactor__status__projection
 
 meta "inline:no" function __split_fields_rec__reactor__trainreactor__status__projection
 
 function __split_fields_rec__reactor__trainreactor__pow__projection [@name:pow] [@model_trace:.3540] 
   (a : __split_fields) : Reactor__power.power =
  a.rec__reactor__trainreactor__pow
 
 meta "model_projection" function __split_fields_rec__reactor__trainreactor__pow__projection
 
 meta "inline:no" function __split_fields_rec__reactor__trainreactor__pow__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content : __split_fields }
 
 function __split_fields__ref___split_fields__content__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___split_fields__content__projection
 
 meta "inline:no" function __split_fields__ref___split_fields__content__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields : __split_fields }
 
 function __rep___split_fields__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___split_fields__projection
 
 meta "inline:no" function __rep___split_fields__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 predicate reactor__trainreactor__onoff__pred 
   (a : __rep) =
  true
 val reactor__trainreactor__onoff__pred 
   (a : __rep) : bool
  ensures { result <-> reactor__trainreactor__onoff__pred (a : __rep) }
 
 val rec__reactor__trainreactor__onoff_ 
   (a : __rep) : Reactor__statusonoff.statusonoff
  requires {  (reactor__trainreactor__onoff__pred a) }
  ensures {  (result = a.__split_fields.rec__reactor__trainreactor__onoff) }
 
 predicate reactor__trainreactor__temp__pred 
   (a : __rep) =
  true
 val reactor__trainreactor__temp__pred 
   (a : __rep) : bool
  ensures { result <-> reactor__trainreactor__temp__pred (a : __rep) }
 
 val rec__reactor__trainreactor__temp_ 
   (a : __rep) : Reactor__temperature.temperature
  requires {  (reactor__trainreactor__temp__pred a) }
  ensures {  (result = a.__split_fields.rec__reactor__trainreactor__temp) }
 
 predicate reactor__trainreactor__rod_number__pred 
   (a : __rep) =
  true
 val reactor__trainreactor__rod_number__pred 
   (a : __rep) : bool
  ensures { result <-> reactor__trainreactor__rod_number__pred (a : __rep) }
 
 val rec__reactor__trainreactor__rod_number_ 
   (a : __rep) : Reactor__rods.rods
  requires {  (reactor__trainreactor__rod_number__pred a) }
  ensures {  (result = a.__split_fields.rec__reactor__trainreactor__rod_number) }
 
 predicate reactor__trainreactor__status__pred 
   (a : __rep) =
  true
 val reactor__trainreactor__status__pred 
   (a : __rep) : bool
  ensures { result <-> reactor__trainreactor__status__pred (a : __rep) }
 
 val rec__reactor__trainreactor__status_ 
   (a : __rep) : Reactor__reactorstatus.reactorstatus
  requires {  (reactor__trainreactor__status__pred a) }
  ensures {  (result = a.__split_fields.rec__reactor__trainreactor__status) }
 
 predicate reactor__trainreactor__pow__pred 
   (a : __rep) =
  true
 val reactor__trainreactor__pow__pred 
   (a : __rep) : bool
  ensures { result <-> reactor__trainreactor__pow__pred (a : __rep) }
 
 val rec__reactor__trainreactor__pow_ 
   (a : __rep) : Reactor__power.power
  requires {  (reactor__trainreactor__pow__pred a) }
  ensures {  (result = a.__split_fields.rec__reactor__trainreactor__pow) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( ( ((Reactor__statusonoff__rep.to_rep a.__split_fields.rec__reactor__trainreactor__onoff) = (Reactor__statusonoff__rep.to_rep b.__split_fields.rec__reactor__trainreactor__onoff)) /\ ((Reactor__temperature__rep.to_rep a.__split_fields.rec__reactor__trainreactor__temp) = (Reactor__temperature__rep.to_rep b.__split_fields.rec__reactor__trainreactor__temp)) )/\( ( ((Reactor__rods__rep.to_rep a.__split_fields.rec__reactor__trainreactor__rod_number) = (Reactor__rods__rep.to_rep b.__split_fields.rec__reactor__trainreactor__rod_number))/\((Reactor__reactorstatus__rep.to_rep a.__split_fields.rec__reactor__trainreactor__status) = (Reactor__reactorstatus__rep.to_rep b.__split_fields.rec__reactor__trainreactor__status)) )/\((Reactor__power__rep.to_rep a.__split_fields.rec__reactor__trainreactor__pow) = (Reactor__power__rep.to_rep b.__split_fields.rec__reactor__trainreactor__pow)) ) )) then (
   True) else (
   False))
 val bool_eq 
   (a : __rep) (b : __rep) : bool
  ensures { result = bool_eq (a : __rep) (b : __rep) }

end

(* Module for axiomatizing type "trainreactor" defined at reactor.ads:16, created in Gnat2Why.Types.Translate_Type *)
module Reactor__trainreactor
 use export Reactor__trainreactor__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type trainreactor =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant reactor__trainreactor__onoff__first__bit 
   : int

 
 val constant reactor__trainreactor__onoff__last__bit 
   : int

 
 val constant reactor__trainreactor__onoff__position 
   : int

 
 axiom reactor__trainreactor__onoff__first__bit_axiom :
  ((reactor__trainreactor__onoff__first__bit ) >= (0 : int))
 
 axiom reactor__trainreactor__onoff__last__bit_axiom :
  ((reactor__trainreactor__onoff__last__bit ) > (reactor__trainreactor__onoff__first__bit ))
 
 axiom reactor__trainreactor__onoff__position_axiom :
  ((reactor__trainreactor__onoff__position ) >= (0 : int))
 
 val constant reactor__trainreactor__temp__first__bit 
   : int

 
 val constant reactor__trainreactor__temp__last__bit 
   : int

 
 val constant reactor__trainreactor__temp__position 
   : int

 
 axiom reactor__trainreactor__temp__first__bit_axiom :
  ((reactor__trainreactor__temp__first__bit ) >= (0 : int))
 
 axiom reactor__trainreactor__temp__last__bit_axiom :
  ((reactor__trainreactor__temp__last__bit ) > (reactor__trainreactor__temp__first__bit ))
 
 axiom reactor__trainreactor__temp__position_axiom :
  ((reactor__trainreactor__temp__position ) >= (0 : int))
 
 val constant reactor__trainreactor__rod_number__first__bit 
   : int

 
 val constant reactor__trainreactor__rod_number__last__bit 
   : int

 
 val constant reactor__trainreactor__rod_number__position 
   : int

 
 axiom reactor__trainreactor__rod_number__first__bit_axiom :
  ((reactor__trainreactor__rod_number__first__bit ) >= (0 : int))
 
 axiom reactor__trainreactor__rod_number__last__bit_axiom :
  ((reactor__trainreactor__rod_number__last__bit ) > (reactor__trainreactor__rod_number__first__bit ))
 
 axiom reactor__trainreactor__rod_number__position_axiom :
  ((reactor__trainreactor__rod_number__position ) >= (0 : int))
 
 val constant reactor__trainreactor__status__first__bit 
   : int

 
 val constant reactor__trainreactor__status__last__bit 
   : int

 
 val constant reactor__trainreactor__status__position 
   : int

 
 axiom reactor__trainreactor__status__first__bit_axiom :
  ((reactor__trainreactor__status__first__bit ) >= (0 : int))
 
 axiom reactor__trainreactor__status__last__bit_axiom :
  ((reactor__trainreactor__status__last__bit ) > (reactor__trainreactor__status__first__bit ))
 
 axiom reactor__trainreactor__status__position_axiom :
  ((reactor__trainreactor__status__position ) >= (0 : int))
 
 val constant reactor__trainreactor__pow__first__bit 
   : int

 
 val constant reactor__trainreactor__pow__last__bit 
   : int

 
 val constant reactor__trainreactor__pow__position 
   : int

 
 axiom reactor__trainreactor__pow__first__bit_axiom :
  ((reactor__trainreactor__pow__first__bit ) >= (0 : int))
 
 axiom reactor__trainreactor__pow__last__bit_axiom :
  ((reactor__trainreactor__pow__last__bit ) > (reactor__trainreactor__pow__first__bit ))
 
 axiom reactor__trainreactor__pow__position_axiom :
  ((reactor__trainreactor__pow__position ) >= (0 : int))
 
 val function user_eq 
   (a : trainreactor) (b : trainreactor) : bool
 
 val constant dummy 
   : trainreactor

 
 type trainreactor__ref =
  { mutable trainreactor__content : trainreactor }
 
 function trainreactor__ref_trainreactor__content__projection 
   (a : trainreactor__ref) : trainreactor =
  a.trainreactor__content
 
 meta "model_projection" function trainreactor__ref_trainreactor__content__projection
 
 meta "inline:no" function trainreactor__ref_trainreactor__content__projection
 
 val trainreactor__havoc 
   (x : trainreactor__ref) : unit
  writes {x}

end

(* Module for axiomatizing the record theory associated to type "train" defined at train.ads:14, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Train__train__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Reactor__trainreactor as Reactor__trainreactor
 use        Train__speed as Train__speed
 use        Train__speed__rep as Train__speed__rep
 use        Train__weight as Train__weight
 use        Train__weight__rep as Train__weight__rep
 use        Train__carriage as Train__carriage
 use        Train__carriage__rep as Train__carriage__rep

 type __split_fields =
  { rec__train__train__reac [@name:reac] [@model_trace:.2889] : Reactor__trainreactor.trainreactor; rec__train__train__sp [@name:sp] [@model_trace:.2901] : Train__speed.speed; rec__train__train__wei [@name:wei] [@model_trace:.2912] : Train__weight.weight; rec__train__train__numbcarri [@name:numbCarri] [@model_trace:.2923] : Train__carriage.carriage }
 
 function __split_fields_rec__train__train__reac__projection [@name:reac] [@model_trace:.2889] 
   (a : __split_fields) : Reactor__trainreactor.trainreactor =
  a.rec__train__train__reac
 
 meta "model_projection" function __split_fields_rec__train__train__reac__projection
 
 meta "inline:no" function __split_fields_rec__train__train__reac__projection
 
 function __split_fields_rec__train__train__sp__projection [@name:sp] [@model_trace:.2901] 
   (a : __split_fields) : Train__speed.speed =
  a.rec__train__train__sp
 
 meta "model_projection" function __split_fields_rec__train__train__sp__projection
 
 meta "inline:no" function __split_fields_rec__train__train__sp__projection
 
 function __split_fields_rec__train__train__wei__projection [@name:wei] [@model_trace:.2912] 
   (a : __split_fields) : Train__weight.weight =
  a.rec__train__train__wei
 
 meta "model_projection" function __split_fields_rec__train__train__wei__projection
 
 meta "inline:no" function __split_fields_rec__train__train__wei__projection
 
 function __split_fields_rec__train__train__numbcarri__projection [@name:numbCarri] [@model_trace:.2923] 
   (a : __split_fields) : Train__carriage.carriage =
  a.rec__train__train__numbcarri
 
 meta "model_projection" function __split_fields_rec__train__train__numbcarri__projection
 
 meta "inline:no" function __split_fields_rec__train__train__numbcarri__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content : __split_fields }
 
 function __split_fields__ref___split_fields__content__2__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___split_fields__content__2__projection
 
 meta "inline:no" function __split_fields__ref___split_fields__content__2__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields : __split_fields }
 
 function __rep___split_fields__2__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___split_fields__2__projection
 
 meta "inline:no" function __rep___split_fields__2__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 predicate train__train__reac__pred 
   (a : __rep) =
  true
 val train__train__reac__pred 
   (a : __rep) : bool
  ensures { result <-> train__train__reac__pred (a : __rep) }
 
 val rec__train__train__reac_ 
   (a : __rep) : Reactor__trainreactor.trainreactor
  requires {  (train__train__reac__pred a) }
  ensures {  (result = a.__split_fields.rec__train__train__reac) }
 
 predicate train__train__sp__pred 
   (a : __rep) =
  true
 val train__train__sp__pred 
   (a : __rep) : bool
  ensures { result <-> train__train__sp__pred (a : __rep) }
 
 val rec__train__train__sp_ 
   (a : __rep) : Train__speed.speed
  requires {  (train__train__sp__pred a) }
  ensures {  (result = a.__split_fields.rec__train__train__sp) }
 
 predicate train__train__wei__pred 
   (a : __rep) =
  true
 val train__train__wei__pred 
   (a : __rep) : bool
  ensures { result <-> train__train__wei__pred (a : __rep) }
 
 val rec__train__train__wei_ 
   (a : __rep) : Train__weight.weight
  requires {  (train__train__wei__pred a) }
  ensures {  (result = a.__split_fields.rec__train__train__wei) }
 
 predicate train__train__numbcarri__pred 
   (a : __rep) =
  true
 val train__train__numbcarri__pred 
   (a : __rep) : bool
  ensures { result <-> train__train__numbcarri__pred (a : __rep) }
 
 val rec__train__train__numbcarri_ 
   (a : __rep) : Train__carriage.carriage
  requires {  (train__train__numbcarri__pred a) }
  ensures {  (result = a.__split_fields.rec__train__train__numbcarri) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( ( (Reactor__trainreactor.bool_eq a.__split_fields.rec__train__train__reac b.__split_fields.rec__train__train__reac) /\ ((Train__speed__rep.to_rep a.__split_fields.rec__train__train__sp) = (Train__speed__rep.to_rep b.__split_fields.rec__train__train__sp)) )/\( ((Train__weight__rep.to_rep a.__split_fields.rec__train__train__wei) = (Train__weight__rep.to_rep b.__split_fields.rec__train__train__wei))/\((Train__carriage__rep.to_rep a.__split_fields.rec__train__train__numbcarri) = (Train__carriage__rep.to_rep b.__split_fields.rec__train__train__numbcarri)) ) )) then (
   True) else (
   False))
 val bool_eq 
   (a : __rep) (b : __rep) : bool
  ensures { result = bool_eq (a : __rep) (b : __rep) }

end

(* Module for axiomatizing type "train" defined at train.ads:14, created in Gnat2Why.Types.Translate_Type *)
module Train__train
 use export Train__train__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type train =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant train__train__reac__first__bit 
   : int

 
 val constant train__train__reac__last__bit 
   : int

 
 val constant train__train__reac__position 
   : int

 
 axiom train__train__reac__first__bit_axiom :
  ((train__train__reac__first__bit ) >= (0 : int))
 
 axiom train__train__reac__last__bit_axiom :
  ((train__train__reac__last__bit ) > (train__train__reac__first__bit ))
 
 axiom train__train__reac__position_axiom :
  ((train__train__reac__position ) >= (0 : int))
 
 val constant train__train__sp__first__bit 
   : int

 
 val constant train__train__sp__last__bit 
   : int

 
 val constant train__train__sp__position 
   : int

 
 axiom train__train__sp__first__bit_axiom :
  ((train__train__sp__first__bit ) >= (0 : int))
 
 axiom train__train__sp__last__bit_axiom :
  ((train__train__sp__last__bit ) > (train__train__sp__first__bit ))
 
 axiom train__train__sp__position_axiom :
  ((train__train__sp__position ) >= (0 : int))
 
 val constant train__train__wei__first__bit 
   : int

 
 val constant train__train__wei__last__bit 
   : int

 
 val constant train__train__wei__position 
   : int

 
 axiom train__train__wei__first__bit_axiom :
  ((train__train__wei__first__bit ) >= (0 : int))
 
 axiom train__train__wei__last__bit_axiom :
  ((train__train__wei__last__bit ) > (train__train__wei__first__bit ))
 
 axiom train__train__wei__position_axiom :
  ((train__train__wei__position ) >= (0 : int))
 
 val constant train__train__numbcarri__first__bit 
   : int

 
 val constant train__train__numbcarri__last__bit 
   : int

 
 val constant train__train__numbcarri__position 
   : int

 
 axiom train__train__numbcarri__first__bit_axiom :
  ((train__train__numbcarri__first__bit ) >= (0 : int))
 
 axiom train__train__numbcarri__last__bit_axiom :
  ((train__train__numbcarri__last__bit ) > (train__train__numbcarri__first__bit ))
 
 axiom train__train__numbcarri__position_axiom :
  ((train__train__numbcarri__position ) >= (0 : int))
 
 val function user_eq 
   (a : train) (b : train) : bool
 
 val constant dummy 
   : train

 
 type train__ref =
  { mutable train__content : train }
 
 function train__ref_train__content__projection 
   (a : train__ref) : train =
  a.train__content
 
 meta "model_projection" function train__ref_train__content__projection
 
 meta "inline:no" function train__ref_train__content__projection
 
 val train__havoc 
   (x : train__ref) : unit
  writes {x}

end

(* Module for defining the constant "this" defined at train.ads:22, created in Gnat2Why.Decls.Translate_Constant *)
module Train__calculatespeed__this
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Train__train as Train__train

 val constant this [#"train.ads" 22 0 0][@model_trace:2943] [@model_projected] [@name:This] 
   : Train__train.train

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "this" defined at train.ads:22, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Train__calculatespeed__this___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "calculatespeed" defined at train.ads:22, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Train__calculatespeed
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Train__train as Train__train

 val function calculatespeed 
   (this : Train__train.train) : int
 
 val predicate calculatespeed__function_guard 
   (temp___result_154 : int) (this : Train__train.train)

end

(* Module for defining the constant "this" defined at train.ads:47, created in Gnat2Why.Decls.Translate_Constant *)
module Train__calculateweight__this
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Train__train as Train__train

 val constant this [#"train.ads" 47 0 0][@model_trace:3227] [@model_projected] [@name:This] 
   : Train__train.train

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "this" defined at train.ads:47, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Train__calculateweight__this___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "calculateweight" defined at train.ads:47, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Train__calculateweight
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Train__train as Train__train

 val function calculateweight 
   (this : Train__train.train) : int
 
 val predicate calculateweight__function_guard 
   (temp___result_155 : int) (this : Train__train.train)

end

(* Module for defining the constant "this" defined at train.ads:51, created in Gnat2Why.Decls.Translate_Constant *)
module Train__calctemp__this
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Train__train as Train__train

 val constant this [#"train.ads" 51 0 0][@model_projected] [@model_trace:3289] [@name:This] 
   : Train__train.train

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "this" defined at train.ads:51, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Train__calctemp__this___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "calctemp" defined at train.ads:51, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Train__calctemp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Train__train as Train__train

 val function calctemp 
   (this : Train__train.train) : int
 
 val predicate calctemp__function_guard 
   (temp___result_156 : int) (this : Train__train.train)

end

(* Module for axiomatizing type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__TcountB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tcountB =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tcountB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tcountB__ref =
  { mutable tcountB__content : tcountB }
 
 function tcountB__ref_tcountB__content__projection 
   (a : tcountB__ref) : tcountB =
  a.tcountB__content
 
 meta "model_projection" function tcountB__ref_tcountB__content__projection
 
 meta "inline:no" function tcountB__ref_tcountB__content__projection
 
 val tcountB__havoc 
   (x : tcountB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__TcountB__rep
 use        Ada__text_io__TcountB as Ada__text_io__TcountB
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ada__text_io__TcountB.tcountB) : int =
  (Ada__text_io__TcountB.tcountB'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__text_io__TcountB.tcountB, 
 predicate in_range = Ada__text_io__TcountB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__count
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type count =
  < range 0 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = count, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type count__ref =
  { mutable count__content : count }
 
 function count__ref_count__content__projection 
   (a : count__ref) : count =
  a.count__content
 
 meta "model_projection" function count__ref_count__content__projection
 
 meta "inline:no" function count__ref_count__content__projection
 
 val count__havoc 
   (x : count__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__count__rep
 use        Ada__text_io__count as Ada__text_io__count
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ada__text_io__count.count) : int =
  (Ada__text_io__count.count'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__text_io__count.count, 
 predicate in_range = Ada__text_io__count.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for defining the constant "this" defined at reactor.ads:41, created in Gnat2Why.Decls.Translate_Constant *)
module Reactor__calculatepower__this
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Reactor__trainreactor as Reactor__trainreactor

 val constant this [#"reactor.ads" 41 0 0][@model_projected] [@model_trace:3662] [@name:This] 
   : Reactor__trainreactor.trainreactor

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "this" defined at reactor.ads:41, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Reactor__calculatepower__this___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing the array theory associated to type "TpowerarrayB" defined at reactor.ads:4, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__integer.integer
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_159   : int.
   (if (( (a__first <= temp___idx_159) /\ (temp___idx_159 <= a__last) )) then (
    ((Standard__integer__rep.to_rep (get a temp___idx_159)) = (Standard__integer__rep.to_rep (get b ((b__first - a__first) + temp___idx_159))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_159   : int.
    (if (( (a__first <= temp___idx_159) /\ (temp___idx_159 <= a__last) )) then (
     ((Standard__integer__rep.to_rep (get a temp___idx_159)) = (Standard__integer__rep.to_rep (get b ((b__first - a__first) + temp___idx_159))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "TpowerarrayB" defined at reactor.ads:4, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__integer__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__integer.component_type, 
 type map = Array__Int__Standard__integer.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__integer.get

end

(* Module for axiomatizing comparison for the array theory associated to type "TpowerarrayB" defined at reactor.ads:4, created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__integer_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__integer.component_type, 
 function to_rep = Standard__integer__rep.to_rep, 
 type map = Array__Int__Standard__integer.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__integer.get, 
 function bool_eq = Array__Int__Standard__integer.bool_eq

end

(* Module for axiomatizing type "TpowerarrayB" defined at reactor.ads:4, created in Gnat2Why.Types.Translate_Type *)
module Reactor__TpowerarrayB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Reactor__TpowerB as Reactor__TpowerB
 use        Reactor__TpowerB__rep as Reactor__TpowerB__rep
 use        Reactor__power as Reactor__power
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 type component_type =
  Standard__integer.integer
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 type index_base_type = Reactor__TpowerB.tpowerB, 
 type index_rep_type = int, 
 function to_rep = Reactor__TpowerB__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Reactor__TpowerB.in_range, 
 predicate index_dynamic_property = Reactor__power.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tpowerarrayB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type tpowerarrayB__ref =
  { mutable tpowerarrayB__content : tpowerarrayB }
 
 function tpowerarrayB__ref_tpowerarrayB__content__projection 
   (a : tpowerarrayB__ref) : tpowerarrayB =
  a.tpowerarrayB__content
 
 meta "model_projection" function tpowerarrayB__ref_tpowerarrayB__content__projection
 
 meta "inline:no" function tpowerarrayB__ref_tpowerarrayB__content__projection
 
 val tpowerarrayB__havoc 
   (x : tpowerarrayB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "powerarray" defined at reactor.ads:4, created in Gnat2Why.Types.Translate_Type *)
module Reactor__powerarray
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 type component_type =
  Standard__integer.integer
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (5200 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for possibly declaring a logic function for "calculatepower" defined at reactor.ads:41, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Reactor__calculatepower
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Reactor__trainreactor as Reactor__trainreactor

 val function calculatepower 
   (this : Reactor__trainreactor.trainreactor) : int
 
 val predicate calculatepower__function_guard 
   (temp___result_160 : int) (this : Reactor__trainreactor.trainreactor)

end
(* Module for defining a ref holding the value of variable "this" defined at train.ads:31, created in Gnat2Why.Decls.Translate_Variable *)
module Train__addcarriage__this
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Train__train as Train__train

 val this__split_fields [#"train.ads" 31 0 0][@model_projected] [@model_trace:3019] [@name:This]  : Train__train.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "this" defined at train.ads:31, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Train__addcarriage__this___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "this" defined at train.ads:35, created in Gnat2Why.Decls.Translate_Variable *)
module Train__decreasecarriage__this
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Train__train as Train__train

 val this__split_fields [#"train.ads" 35 0 0][@model_trace:3068] [@model_projected] [@name:This]  : Train__train.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "this" defined at train.ads:35, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Train__decreasecarriage__this___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "this" defined at train.ads:39, created in Gnat2Why.Decls.Translate_Variable *)
module Train__addrod__this
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Train__train as Train__train

 val this__split_fields [#"train.ads" 39 0 0][@model_projected] [@name:This] [@model_trace:3117]  : Train__train.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "this" defined at train.ads:39, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Train__addrod__this___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "this" defined at train.ads:43, created in Gnat2Why.Decls.Translate_Variable *)
module Train__decreaserod__this
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Train__train as Train__train

 val this__split_fields [#"train.ads" 43 0 0][@model_trace:3172] [@model_projected] [@name:This]  : Train__train.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "this" defined at train.ads:43, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Train__decreaserod__this___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "spfloat" defined at train.adb:10, created in Gnat2Why.Decls.Translate_Variable *)
module Train__calculatespeed__spfloat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32

 val spfloat [#"train.adb" 10 0 0][@model_projected] [@model_trace:2346] [@name:SpFloat]  : Float32.t__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "spfloat" defined at train.adb:10, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Train__calculatespeed__spfloat___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "spee" defined at train.adb:13, created in Gnat2Why.Decls.Translate_Variable *)
module Train__calculatespeed__spee
 use        "_gnatprove_standard".Main
 use        "int".Int

 val spee [#"train.adb" 13 0 0][@name:Spee] [@model_trace:2355] [@model_projected]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "spee" defined at train.adb:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Train__calculatespeed__spee___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "ret" defined at train.adb:97, created in Gnat2Why.Decls.Translate_Variable *)
module Train__calculateweight__ret
 use        "_gnatprove_standard".Main
 use        "int".Int

 val ret [#"train.adb" 97 0 0][@model_projected] [@model_trace:2707] [@name:ret]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "ret" defined at train.adb:97, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Train__calculateweight__ret___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "tempe" defined at train.adb:117, created in Gnat2Why.Decls.Translate_Variable *)
module Train__calctemp__tempe
 use        "_gnatprove_standard".Main
 use        "int".Int

 val tempe [#"train.adb" 117 0 0][@name:tempe] [@model_projected] [@model_trace:2767]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "tempe" defined at train.adb:117, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Train__calctemp__tempe___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module declaring the external object "ada__text_io__standard_in," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_in
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_in  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__file_system," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__file_system
 use        "_gnatprove_standard".Main
 use        "int".Int

 val file_system  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__standard_out," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_out
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_out  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__standard_err," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_err
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_err  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_in," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_in
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_in  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_out," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_out
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_out  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_err," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_err
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_err  : Main.__private__ref 

end
(* Module giving axioms for type "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__short_short_integer as Standard__short_short_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) =
  (if (( temp___is_init_0 \/ (Standard__short_short_integer.first <= Standard__short_short_integer.last) )) then (
   (Standard__short_short_integer.dynamic_property Standard__short_short_integer.first Standard__short_short_integer.last temp___expr_4)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_5 : int) (temp___skip_top_level_6 : bool) }

end

(* Module giving axioms for type "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__short_integer as Standard__short_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) =
  (if (( temp___is_init_7 \/ (Standard__short_integer.first <= Standard__short_integer.last) )) then (
   (Standard__short_integer.dynamic_property Standard__short_integer.first Standard__short_integer.last temp___expr_11)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_12 : int) (temp___skip_top_level_13 : bool) }

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) =
  (if (( temp___is_init_14 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_18)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_19 : int) (temp___skip_top_level_20 : bool) }

end

(* Module giving axioms for type "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__long_integer as Standard__long_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) =
  (if (( temp___is_init_21 \/ (Standard__long_integer.first <= Standard__long_integer.last) )) then (
   (Standard__long_integer.dynamic_property Standard__long_integer.first Standard__long_integer.last temp___expr_25)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_26 : int) (temp___skip_top_level_27 : bool) }

end

(* Module giving axioms for type "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__long_long_integer as Standard__long_long_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) =
  (if (( temp___is_init_28 \/ (Standard__long_long_integer.first <= Standard__long_long_integer.last) )) then (
   (Standard__long_long_integer.dynamic_property Standard__long_long_integer.first Standard__long_long_integer.last temp___expr_32)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_33 : int) (temp___skip_top_level_34 : bool) }

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__natural as Standard__natural

 predicate dynamic_invariant [@inline] 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) =
  (if (( temp___is_init_35 \/ (Standard__natural.first <= Standard__natural.last) )) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last temp___expr_39)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_40 : int) (temp___skip_top_level_41 : bool) }

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive as Standard__positive

 predicate dynamic_invariant [@inline] 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) =
  (if (( temp___is_init_42 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_46)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_47 : int) (temp___skip_top_level_48 : bool) }

end

(* Module giving axioms for type "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32
 use        Standard__short_float as Standard__short_float

 predicate dynamic_invariant [@inline] 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) =
  (if (( temp___is_init_49 \/ (Float32.le Standard__short_float.first Standard__short_float.last) )) then (
   (Standard__short_float.dynamic_property Standard__short_float.first Standard__short_float.last temp___expr_53)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) }

end

(* Module giving axioms for type "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32
 use        Standard__float as Standard__float

 predicate dynamic_invariant [@inline] 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) =
  (if (( temp___is_init_56 \/ (Float32.le Standard__float.first Standard__float.last) )) then (
   (Standard__float.dynamic_property Standard__float.first Standard__float.last temp___expr_60)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) }

end

(* Module giving axioms for type "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float64 as Float64
 use        Standard__long_float as Standard__long_float

 predicate dynamic_invariant [@inline] 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) =
  (if (( temp___is_init_63 \/ (Float64.le Standard__long_float.first Standard__long_float.last) )) then (
   (Standard__long_float.dynamic_property Standard__long_float.first Standard__long_float.last temp___expr_67)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) }

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character

 predicate dynamic_invariant [@inline] 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) =
  (if (( temp___is_init_70 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_74)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_75 : int) (temp___skip_top_level_76 : bool) }

end

(* Module giving axioms for type "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character as Standard__wide_character

 predicate dynamic_invariant [@inline] 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) =
  (if (( temp___is_init_77 \/ (Standard__wide_character.first <= Standard__wide_character.last) )) then (
   (Standard__wide_character.dynamic_property Standard__wide_character.first Standard__wide_character.last temp___expr_81)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_82 : int) (temp___skip_top_level_83 : bool) }

end

(* Module giving axioms for type "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character as Standard__wide_wide_character

 predicate dynamic_invariant [@inline] 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) =
  (if (( temp___is_init_84 \/ (Standard__wide_wide_character.first <= Standard__wide_wide_character.last) )) then (
   (Standard__wide_wide_character.dynamic_property Standard__wide_wide_character.first Standard__wide_wide_character.last temp___expr_88)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_89 : int) (temp___skip_top_level_90 : bool) }

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__string as Standard__string

 predicate dynamic_invariant [@inline] 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) =
  (if (temp___skip_constant_93) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_96) (Standard__string.last temp___expr_96))))
 val dynamic_invariant [@inline] 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) }

end

(* Module giving axioms for type "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__wide_string as Standard__wide_string

 predicate dynamic_invariant [@inline] 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) =
  (if (temp___skip_constant_100) then (
   true) else (
   (Standard__wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_string.first temp___expr_103) (Standard__wide_string.last temp___expr_103))))
 val dynamic_invariant [@inline] 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) }

end

(* Module giving axioms for type "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__wide_wide_string as Standard__wide_wide_string

 predicate dynamic_invariant [@inline] 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) =
  (if (temp___skip_constant_107) then (
   true) else (
   (Standard__wide_wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_wide_string.first temp___expr_110) (Standard__wide_wide_string.last temp___expr_110))))
 val dynamic_invariant [@inline] 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) }

end

(* Module giving axioms for type "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__duration as Standard__duration

 predicate dynamic_invariant [@inline] 
   (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) =
  (if (( temp___is_init_112 \/ (Standard__duration.first <= Standard__duration.last) )) then (
   (Standard__duration.dynamic_property Standard__duration.first Standard__duration.last temp___expr_116)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) }

end

(* Module giving axioms for type "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_8 as Standard__integer_8

 predicate dynamic_invariant [@inline] 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) =
  (if (( temp___is_init_119 \/ (Standard__integer_8.first <= Standard__integer_8.last) )) then (
   (Standard__integer_8.dynamic_property Standard__integer_8.first Standard__integer_8.last temp___expr_123)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_124 : int) (temp___skip_top_level_125 : bool) }

end

(* Module giving axioms for type "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_16 as Standard__integer_16

 predicate dynamic_invariant [@inline] 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) =
  (if (( temp___is_init_126 \/ (Standard__integer_16.first <= Standard__integer_16.last) )) then (
   (Standard__integer_16.dynamic_property Standard__integer_16.first Standard__integer_16.last temp___expr_130)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_131 : int) (temp___skip_top_level_132 : bool) }

end

(* Module giving axioms for type "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_32 as Standard__integer_32

 predicate dynamic_invariant [@inline] 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) =
  (if (( temp___is_init_133 \/ (Standard__integer_32.first <= Standard__integer_32.last) )) then (
   (Standard__integer_32.dynamic_property Standard__integer_32.first Standard__integer_32.last temp___expr_137)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_138 : int) (temp___skip_top_level_139 : bool) }

end

(* Module giving axioms for type "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_64 as Standard__integer_64

 predicate dynamic_invariant [@inline] 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) =
  (if (( temp___is_init_140 \/ (Standard__integer_64.first <= Standard__integer_64.last) )) then (
   (Standard__integer_64.dynamic_property Standard__integer_64.first Standard__integer_64.last temp___expr_144)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_145 : int) (temp___skip_top_level_146 : bool) }

end

(* Module giving axioms for type "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__universal_integer as Standard__universal_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) =
  (if (( temp___is_init_147 \/ (Standard__universal_integer.first <= Standard__universal_integer.last) )) then (
   (Standard__universal_integer.dynamic_property Standard__universal_integer.first Standard__universal_integer.last temp___expr_151)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_152 : int) (temp___skip_top_level_153 : bool) }

end

(* Module for possibly declaring a logic function for "addcarriage" defined at train.ads:31, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Train__addcarriage
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "decreasecarriage" defined at train.ads:35, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Train__decreasecarriage
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "addrod" defined at train.ads:39, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Train__addrod
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "decreaserod" defined at train.ads:43, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Train__decreaserod
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "line_length__2" defined at a-textio.ads:245, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__line_length__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 val function line_length__2 
   (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private) : int
 
 val predicate line_length__2__function_guard 
   (temp___result_157 : int) (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private)

end

(* Module for possibly declaring a logic function for "page_length__2" defined at a-textio.ads:251, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__page_length__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 val function page_length__2 
   (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private) : int
 
 val predicate page_length__2__function_guard 
   (temp___result_158 : int) (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private)

end

(* Module giving axioms for type "TspeedB" defined at train.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Train__TspeedB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "speed" defined at train.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Train__speed___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Train__speed as Train__speed

 predicate dynamic_invariant [@inline] 
   (temp___expr_165 : int) (temp___is_init_161 : bool) (temp___skip_constant_162 : bool) (temp___do_toplevel_163 : bool) (temp___do_typ_inv_164 : bool) =
  (if (( temp___is_init_161 \/ (Train__speed.first <= Train__speed.last) )) then (
   (Train__speed.dynamic_property Train__speed.first Train__speed.last temp___expr_165)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_165 : int) (temp___is_init_161 : bool) (temp___skip_constant_162 : bool) (temp___do_toplevel_163 : bool) (temp___do_typ_inv_164 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_165 : int) (temp___is_init_161 : bool) (temp___skip_constant_162 : bool) (temp___do_toplevel_163 : bool) (temp___do_typ_inv_164 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_166 : int) (temp___skip_top_level_167 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_166 : int) (temp___skip_top_level_167 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_166 : int) (temp___skip_top_level_167 : bool) }

end

(* Module giving axioms for type "TweightB" defined at train.ads:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module Train__TweightB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "weight" defined at train.ads:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module Train__weight___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Train__weight as Train__weight

 predicate dynamic_invariant [@inline] 
   (temp___expr_172 : int) (temp___is_init_168 : bool) (temp___skip_constant_169 : bool) (temp___do_toplevel_170 : bool) (temp___do_typ_inv_171 : bool) =
  (if (( temp___is_init_168 \/ (Train__weight.first <= Train__weight.last) )) then (
   (Train__weight.dynamic_property Train__weight.first Train__weight.last temp___expr_172)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_172 : int) (temp___is_init_168 : bool) (temp___skip_constant_169 : bool) (temp___do_toplevel_170 : bool) (temp___do_typ_inv_171 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_172 : int) (temp___is_init_168 : bool) (temp___skip_constant_169 : bool) (temp___do_toplevel_170 : bool) (temp___do_typ_inv_171 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_173 : int) (temp___skip_top_level_174 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_173 : int) (temp___skip_top_level_174 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_173 : int) (temp___skip_top_level_174 : bool) }

end

(* Module giving axioms for type "TcarriageB" defined at train.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Train__TcarriageB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "carriage" defined at train.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Train__carriage___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Train__carriage as Train__carriage

 predicate dynamic_invariant [@inline] 
   (temp___expr_179 : int) (temp___is_init_175 : bool) (temp___skip_constant_176 : bool) (temp___do_toplevel_177 : bool) (temp___do_typ_inv_178 : bool) =
  (if (( temp___is_init_175 \/ (Train__carriage.first <= Train__carriage.last) )) then (
   (Train__carriage.dynamic_property Train__carriage.first Train__carriage.last temp___expr_179)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_179 : int) (temp___is_init_175 : bool) (temp___skip_constant_176 : bool) (temp___do_toplevel_177 : bool) (temp___do_typ_inv_178 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_179 : int) (temp___is_init_175 : bool) (temp___skip_constant_176 : bool) (temp___do_toplevel_177 : bool) (temp___do_typ_inv_178 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_180 : int) (temp___skip_top_level_181 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_180 : int) (temp___skip_top_level_181 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_180 : int) (temp___skip_top_level_181 : bool) }

end

(* Module giving axioms for type "statusonoff" defined at reactor.ads:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module Reactor__statusonoff___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Reactor__statusonoff as Reactor__statusonoff

 predicate dynamic_invariant [@inline] 
   (temp___expr_186 : int) (temp___is_init_182 : bool) (temp___skip_constant_183 : bool) (temp___do_toplevel_184 : bool) (temp___do_typ_inv_185 : bool) =
  (if (( temp___is_init_182 \/ (Reactor__statusonoff.first <= Reactor__statusonoff.last) )) then (
   (Reactor__statusonoff.dynamic_property Reactor__statusonoff.first Reactor__statusonoff.last temp___expr_186)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_186 : int) (temp___is_init_182 : bool) (temp___skip_constant_183 : bool) (temp___do_toplevel_184 : bool) (temp___do_typ_inv_185 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_186 : int) (temp___is_init_182 : bool) (temp___skip_constant_183 : bool) (temp___do_toplevel_184 : bool) (temp___do_typ_inv_185 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_187 : int) (temp___skip_top_level_188 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_187 : int) (temp___skip_top_level_188 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_187 : int) (temp___skip_top_level_188 : bool) }

end

(* Module giving axioms for type "TtemperatureB" defined at reactor.ads:10, created in Gnat2Why.Types.Generate_Type_Completion *)
module Reactor__TtemperatureB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "temperature" defined at reactor.ads:10, created in Gnat2Why.Types.Generate_Type_Completion *)
module Reactor__temperature___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Reactor__temperature as Reactor__temperature

 predicate dynamic_invariant [@inline] 
   (temp___expr_193 : int) (temp___is_init_189 : bool) (temp___skip_constant_190 : bool) (temp___do_toplevel_191 : bool) (temp___do_typ_inv_192 : bool) =
  (if (( temp___is_init_189 \/ (Reactor__temperature.first <= Reactor__temperature.last) )) then (
   (Reactor__temperature.dynamic_property Reactor__temperature.first Reactor__temperature.last temp___expr_193)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_193 : int) (temp___is_init_189 : bool) (temp___skip_constant_190 : bool) (temp___do_toplevel_191 : bool) (temp___do_typ_inv_192 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_193 : int) (temp___is_init_189 : bool) (temp___skip_constant_190 : bool) (temp___do_toplevel_191 : bool) (temp___do_typ_inv_192 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_194 : int) (temp___skip_top_level_195 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_194 : int) (temp___skip_top_level_195 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_194 : int) (temp___skip_top_level_195 : bool) }

end

(* Module giving axioms for type "TrodsB" defined at reactor.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Reactor__TrodsB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "rods" defined at reactor.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Reactor__rods___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Reactor__rods as Reactor__rods

 predicate dynamic_invariant [@inline] 
   (temp___expr_200 : int) (temp___is_init_196 : bool) (temp___skip_constant_197 : bool) (temp___do_toplevel_198 : bool) (temp___do_typ_inv_199 : bool) =
  (if (( temp___is_init_196 \/ (Reactor__rods.first <= Reactor__rods.last) )) then (
   (Reactor__rods.dynamic_property Reactor__rods.first Reactor__rods.last temp___expr_200)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_200 : int) (temp___is_init_196 : bool) (temp___skip_constant_197 : bool) (temp___do_toplevel_198 : bool) (temp___do_typ_inv_199 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_200 : int) (temp___is_init_196 : bool) (temp___skip_constant_197 : bool) (temp___do_toplevel_198 : bool) (temp___do_typ_inv_199 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_201 : int) (temp___skip_top_level_202 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_201 : int) (temp___skip_top_level_202 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_201 : int) (temp___skip_top_level_202 : bool) }

end

(* Module giving axioms for type "reactorstatus" defined at reactor.ads:8, created in Gnat2Why.Types.Generate_Type_Completion *)
module Reactor__reactorstatus___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Reactor__reactorstatus as Reactor__reactorstatus

 predicate dynamic_invariant [@inline] 
   (temp___expr_207 : int) (temp___is_init_203 : bool) (temp___skip_constant_204 : bool) (temp___do_toplevel_205 : bool) (temp___do_typ_inv_206 : bool) =
  (if (( temp___is_init_203 \/ (Reactor__reactorstatus.first <= Reactor__reactorstatus.last) )) then (
   (Reactor__reactorstatus.dynamic_property Reactor__reactorstatus.first Reactor__reactorstatus.last temp___expr_207)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_207 : int) (temp___is_init_203 : bool) (temp___skip_constant_204 : bool) (temp___do_toplevel_205 : bool) (temp___do_typ_inv_206 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_207 : int) (temp___is_init_203 : bool) (temp___skip_constant_204 : bool) (temp___do_toplevel_205 : bool) (temp___do_typ_inv_206 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_208 : int) (temp___skip_top_level_209 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_208 : int) (temp___skip_top_level_209 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_208 : int) (temp___skip_top_level_209 : bool) }

end

(* Module giving axioms for type "TpowerB" defined at reactor.ads:3, created in Gnat2Why.Types.Generate_Type_Completion *)
module Reactor__TpowerB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "power" defined at reactor.ads:3, created in Gnat2Why.Types.Generate_Type_Completion *)
module Reactor__power___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Reactor__power as Reactor__power

 predicate dynamic_invariant [@inline] 
   (temp___expr_214 : int) (temp___is_init_210 : bool) (temp___skip_constant_211 : bool) (temp___do_toplevel_212 : bool) (temp___do_typ_inv_213 : bool) =
  (if (( temp___is_init_210 \/ (Reactor__power.first <= Reactor__power.last) )) then (
   (Reactor__power.dynamic_property Reactor__power.first Reactor__power.last temp___expr_214)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_214 : int) (temp___is_init_210 : bool) (temp___skip_constant_211 : bool) (temp___do_toplevel_212 : bool) (temp___do_typ_inv_213 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_214 : int) (temp___is_init_210 : bool) (temp___skip_constant_211 : bool) (temp___do_toplevel_212 : bool) (temp___do_typ_inv_213 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_215 : int) (temp___skip_top_level_216 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_215 : int) (temp___skip_top_level_216 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_215 : int) (temp___skip_top_level_216 : bool) }

end

(* Module giving axioms for type "trainreactor" defined at reactor.ads:16, created in Gnat2Why.Types.Generate_Type_Completion *)
module Reactor__trainreactor___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Reactor__trainreactor as Reactor__trainreactor
 use        Reactor__statusonoff as Reactor__statusonoff
 use        Reactor__statusonoff__rep as Reactor__statusonoff__rep
 use        Reactor__temperature as Reactor__temperature
 use        Reactor__temperature__rep as Reactor__temperature__rep
 use        Reactor__rods as Reactor__rods
 use        Reactor__rods__rep as Reactor__rods__rep
 use        Reactor__reactorstatus as Reactor__reactorstatus
 use        Reactor__reactorstatus__rep as Reactor__reactorstatus__rep
 use        Reactor__power as Reactor__power
 use        Reactor__power__rep as Reactor__power__rep

 predicate dynamic_invariant [@inline] 
   (temp___expr_221 : Reactor__trainreactor.trainreactor) (temp___is_init_217 : bool) (temp___skip_constant_218 : bool) (temp___do_toplevel_219 : bool) (temp___do_typ_inv_220 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_221 : Reactor__trainreactor.trainreactor) (temp___is_init_217 : bool) (temp___skip_constant_218 : bool) (temp___do_toplevel_219 : bool) (temp___do_typ_inv_220 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_221 : Reactor__trainreactor.trainreactor) (temp___is_init_217 : bool) (temp___skip_constant_218 : bool) (temp___do_toplevel_219 : bool) (temp___do_typ_inv_220 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_222 : Reactor__trainreactor.trainreactor) (temp___skip_top_level_223 : bool) =
  ( ( (if ((Reactor__trainreactor.reactor__trainreactor__onoff__pred temp___expr_222)) then (
   ((Reactor__statusonoff__rep.to_rep temp___expr_222.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__onoff) = (1 : int))) else true) /\ (if ((Reactor__trainreactor.reactor__trainreactor__temp__pred temp___expr_222)) then (
   ((Reactor__temperature__rep.to_rep temp___expr_222.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__temp) = (20 : int))) else true) )/\( ( (if ((Reactor__trainreactor.reactor__trainreactor__rod_number__pred temp___expr_222)) then (
   ((Reactor__rods__rep.to_rep temp___expr_222.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__rod_number) = (5 : int))) else true)/\(if ((Reactor__trainreactor.reactor__trainreactor__status__pred temp___expr_222)) then (
   ((Reactor__reactorstatus__rep.to_rep temp___expr_222.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__status) = (0 : int))) else true) )/\(if ((Reactor__trainreactor.reactor__trainreactor__pow__pred temp___expr_222)) then (
   ((Reactor__power__rep.to_rep temp___expr_222.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__pow) = (0 : int))) else true) ) )
 val default_initial_assumption [@inline] 
   (temp___expr_222 : Reactor__trainreactor.trainreactor) (temp___skip_top_level_223 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_222 : Reactor__trainreactor.trainreactor) (temp___skip_top_level_223 : bool) }

end

(* Module giving axioms for type "train" defined at train.ads:14, created in Gnat2Why.Types.Generate_Type_Completion *)
module Train__train___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Train__train as Train__train
 use        Reactor__trainreactor as Reactor__trainreactor
 use        Train__speed as Train__speed
 use        Train__speed__rep as Train__speed__rep
 use        Train__weight as Train__weight
 use        Train__weight__rep as Train__weight__rep
 use        Train__carriage as Train__carriage
 use        Train__carriage__rep as Train__carriage__rep
 use        Reactor__statusonoff as Reactor__statusonoff
 use        Reactor__statusonoff__rep as Reactor__statusonoff__rep
 use        Reactor__temperature as Reactor__temperature
 use        Reactor__temperature__rep as Reactor__temperature__rep
 use        Reactor__rods as Reactor__rods
 use        Reactor__rods__rep as Reactor__rods__rep
 use        Reactor__reactorstatus as Reactor__reactorstatus
 use        Reactor__reactorstatus__rep as Reactor__reactorstatus__rep
 use        Reactor__power as Reactor__power
 use        Reactor__power__rep as Reactor__power__rep

 predicate dynamic_invariant [@inline] 
   (temp___expr_228 : Train__train.train) (temp___is_init_224 : bool) (temp___skip_constant_225 : bool) (temp___do_toplevel_226 : bool) (temp___do_typ_inv_227 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_228 : Train__train.train) (temp___is_init_224 : bool) (temp___skip_constant_225 : bool) (temp___do_toplevel_226 : bool) (temp___do_typ_inv_227 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_228 : Train__train.train) (temp___is_init_224 : bool) (temp___skip_constant_225 : bool) (temp___do_toplevel_226 : bool) (temp___do_typ_inv_227 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_229 : Train__train.train) (temp___skip_top_level_230 : bool) =
  ( ( (if ((Train__train.train__train__reac__pred temp___expr_229)) then (
   (let temp___231 [@mlw:proxy_symbol] [@introduced] = temp___expr_229.Train__train.__split_fields.Train__train.rec__train__train__reac in (
    ( ( (if ((Reactor__trainreactor.reactor__trainreactor__onoff__pred temp___expr_229.Train__train.__split_fields.Train__train.rec__train__train__reac)) then (
     ((Reactor__statusonoff__rep.to_rep temp___expr_229.Train__train.__split_fields.Train__train.rec__train__train__reac.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__onoff) = (1 : int))) else true) /\ (if ((Reactor__trainreactor.reactor__trainreactor__temp__pred temp___expr_229.Train__train.__split_fields.Train__train.rec__train__train__reac)) then (
     ((Reactor__temperature__rep.to_rep temp___expr_229.Train__train.__split_fields.Train__train.rec__train__train__reac.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__temp) = (20 : int))) else true) )/\( ( (if ((Reactor__trainreactor.reactor__trainreactor__rod_number__pred temp___expr_229.Train__train.__split_fields.Train__train.rec__train__train__reac)) then (
     ((Reactor__rods__rep.to_rep temp___expr_229.Train__train.__split_fields.Train__train.rec__train__train__reac.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__rod_number) = (5 : int))) else true)/\(if ((Reactor__trainreactor.reactor__trainreactor__status__pred temp___expr_229.Train__train.__split_fields.Train__train.rec__train__train__reac)) then (
     ((Reactor__reactorstatus__rep.to_rep temp___expr_229.Train__train.__split_fields.Train__train.rec__train__train__reac.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__status) = (0 : int))) else true) )/\(if ((Reactor__trainreactor.reactor__trainreactor__pow__pred temp___expr_229.Train__train.__split_fields.Train__train.rec__train__train__reac)) then (
     ((Reactor__power__rep.to_rep temp___expr_229.Train__train.__split_fields.Train__train.rec__train__train__reac.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__pow) = (0 : int))) else true) ) )))
  ) else true) /\ (if ((Train__train.train__train__sp__pred temp___expr_229)) then (
   ((Train__speed__rep.to_rep temp___expr_229.Train__train.__split_fields.Train__train.rec__train__train__sp) = (0 : int))) else true) )/\( (if ((Train__train.train__train__wei__pred temp___expr_229)) then (
   ((Train__weight__rep.to_rep temp___expr_229.Train__train.__split_fields.Train__train.rec__train__train__wei) = (2000 : int))) else true)/\(if ((Train__train.train__train__numbcarri__pred temp___expr_229)) then (
   ((Train__carriage__rep.to_rep temp___expr_229.Train__train.__split_fields.Train__train.rec__train__train__numbcarri) = (0 : int))) else true) ) )
 val default_initial_assumption [@inline] 
   (temp___expr_229 : Train__train.train) (temp___skip_top_level_230 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_229 : Train__train.train) (temp___skip_top_level_230 : bool) }

end

(* Module giving axioms for type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__TcountB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__count___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ada__text_io__count as Ada__text_io__count

 predicate dynamic_invariant [@inline] 
   (temp___expr_236 : int) (temp___is_init_232 : bool) (temp___skip_constant_233 : bool) (temp___do_toplevel_234 : bool) (temp___do_typ_inv_235 : bool) =
  (if (( temp___is_init_232 \/ (Ada__text_io__count.first <= Ada__text_io__count.last) )) then (
   (Ada__text_io__count.dynamic_property Ada__text_io__count.first Ada__text_io__count.last temp___expr_236)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_236 : int) (temp___is_init_232 : bool) (temp___skip_constant_233 : bool) (temp___do_toplevel_234 : bool) (temp___do_typ_inv_235 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_236 : int) (temp___is_init_232 : bool) (temp___skip_constant_233 : bool) (temp___do_toplevel_234 : bool) (temp___do_typ_inv_235 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_237 : int) (temp___skip_top_level_238 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_237 : int) (temp___skip_top_level_238 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_237 : int) (temp___skip_top_level_238 : bool) }

end

(* Module giving axioms for type "TpowerarrayB" defined at reactor.ads:4, created in Gnat2Why.Types.Generate_Type_Completion *)
module Reactor__TpowerarrayB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "powerarray" defined at reactor.ads:4, created in Gnat2Why.Types.Generate_Type_Completion *)
module Reactor__powerarray___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_243 : Array__Int__Standard__integer.map) (temp___is_init_239 : bool) (temp___skip_constant_240 : bool) (temp___do_toplevel_241 : bool) (temp___do_typ_inv_242 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_243 : Array__Int__Standard__integer.map) (temp___is_init_239 : bool) (temp___skip_constant_240 : bool) (temp___do_toplevel_241 : bool) (temp___do_typ_inv_242 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_243 : Array__Int__Standard__integer.map) (temp___is_init_239 : bool) (temp___skip_constant_240 : bool) (temp___do_toplevel_241 : bool) (temp___do_typ_inv_242 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_245 : Array__Int__Standard__integer.map) (temp___skip_top_level_246 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_245 : Array__Int__Standard__integer.map) (temp___skip_top_level_246 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_245 : Array__Int__Standard__integer.map) (temp___skip_top_level_246 : bool) }

end
(* Module for defining the value of constant "reactorweight" defined at train.ads:8, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Train__reactorweight___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Train__reactorweight as Train__reactorweight

 axiom reactorweight__def_axiom :
  ((Train__reactorweight.reactorweight ) = (2000 : int))

end

(* Module for defining the value of constant "carriageweight" defined at train.ads:9, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Train__carriageweight___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Train__carriageweight as Train__carriageweight

 axiom carriageweight__def_axiom :
  ((Train__carriageweight.carriageweight ) = (2000 : int))

end

(* Module for declaring a program function (and possibly an axiom) for "calculatespeed" defined at train.ads:22, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Train__calculatespeed___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Train__train as Train__train
 use        Train__calculatespeed as Train__calculatespeed
 use        Train__train___axiom as Train__train___axiom
 use        Reactor__trainreactor as Reactor__trainreactor
 use        Train__speed___axiom as Train__speed___axiom
 use        Train__weight as Train__weight
 use        Train__weight__rep as Train__weight__rep
 use        Reactor__power as Reactor__power
 use        Reactor__power__rep as Reactor__power__rep

 val calculatespeed 
   (this : Train__train.train) : int
  requires {  ( ( ( ( [@GP_Pretty_Ada:2963] ((Train__weight__rep.to_rep this.Train__train.__split_fields.Train__train.rec__train__train__wei) >= (2000 : int)) ) /\ ( [@GP_Pretty_Ada:2971] ((Train__weight__rep.to_rep this.Train__train.__split_fields.Train__train.rec__train__train__wei) <= (22000 : int)) ) ) /\ ( [@GP_Pretty_Ada:2981] ((Reactor__power__rep.to_rep this.Train__train.__split_fields.Train__train.rec__train__train__reac.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__pow) >= (0 : int)) ) ) /\ ( [@GP_Pretty_Ada:2991] ((Reactor__power__rep.to_rep this.Train__train.__split_fields.Train__train.rec__train__train__reac.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__pow) <= (5200 : int)) ) ) }
  ensures {  ( ( (result = (Train__calculatespeed.calculatespeed this)) /\ (Train__calculatespeed.calculatespeed__function_guard result this) )/\( (Train__speed___axiom.dynamic_invariant result True False True True) /\ ( ( [@GP_Pretty_Ada:3001] (result >= (0 : int)) ) /\ ( [@GP_Pretty_Ada:3009] (result <= (100 : int)) ) ) ) ) }
 
 axiom calculatespeed__post_axiom :
  (forall this   : Train__train.train [(Train__calculatespeed.calculatespeed this)].
   ( ( (Train__train___axiom.dynamic_invariant this True True True True) /\ ( ( ( ( [@GP_Pretty_Ada:2963] ((Train__weight__rep.to_rep this.Train__train.__split_fields.Train__train.rec__train__train__wei) >= (2000 : int)) ) /\ ( [@GP_Pretty_Ada:2971] ((Train__weight__rep.to_rep this.Train__train.__split_fields.Train__train.rec__train__train__wei) <= (22000 : int)) ) ) /\ ( [@GP_Pretty_Ada:2981] ((Reactor__power__rep.to_rep this.Train__train.__split_fields.Train__train.rec__train__train__reac.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__pow) >= (0 : int)) ) ) /\ ( [@GP_Pretty_Ada:2991] ((Reactor__power__rep.to_rep this.Train__train.__split_fields.Train__train.rec__train__train__reac.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__pow) <= (5200 : int)) ) ) ) -> (let result = (Train__calculatespeed.calculatespeed this) in (
    (if ((Train__calculatespeed.calculatespeed__function_guard result this)) then (
     ( ( ( ( [@GP_Pretty_Ada:3001] (result >= (0 : int)) ) /\ ( [@GP_Pretty_Ada:3009] (result <= (100 : int)) ) ) /\ (Train__speed___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "addcarriage" defined at train.ads:31, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Train__addcarriage___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Train__train as Train__train
 use        Train__train___axiom as Train__train___axiom
 use        Reactor__trainreactor as Reactor__trainreactor
 use        Train__carriage as Train__carriage
 use        Train__carriage__rep as Train__carriage__rep
 use        Reactor__statusonoff as Reactor__statusonoff
 use        Reactor__statusonoff__rep as Reactor__statusonoff__rep

 val addcarriage 
   (this__split_fields : Train__train.__split_fields__ref) : unit
  requires {  ( ( [@GP_Pretty_Ada:3040] ((Reactor__statusonoff__rep.to_rep { Train__train.__split_fields = this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__reac.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__onoff) = (1 : int)) ) /\ ( [@GP_Pretty_Ada:3046] ((Train__carriage__rep.to_rep { Train__train.__split_fields = this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__numbcarri) < (10 : int)) ) ) }
  ensures {  ( ( [@GP_Pretty_Ada:21055] ((Train__carriage__rep.to_rep { Train__train.__split_fields = this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__numbcarri) > (Train__carriage__rep.to_rep (old { Train__train.__split_fields = this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__numbcarri ))) ) /\ (Train__train___axiom.dynamic_invariant { Train__train.__split_fields = this__split_fields.Train__train.__split_fields__content } True True True True) ) }
  writes {this__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "decreasecarriage" defined at train.ads:35, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Train__decreasecarriage___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Train__train as Train__train
 use        Train__train___axiom as Train__train___axiom
 use        Reactor__trainreactor as Reactor__trainreactor
 use        Train__carriage as Train__carriage
 use        Train__carriage__rep as Train__carriage__rep
 use        Reactor__statusonoff as Reactor__statusonoff
 use        Reactor__statusonoff__rep as Reactor__statusonoff__rep

 val decreasecarriage 
   (this__split_fields : Train__train.__split_fields__ref) : unit
  requires {  ( ( [@GP_Pretty_Ada:3089] ((Reactor__statusonoff__rep.to_rep { Train__train.__split_fields = this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__reac.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__onoff) = (1 : int)) ) /\ ( [@GP_Pretty_Ada:3095] ((Train__carriage__rep.to_rep { Train__train.__split_fields = this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__numbcarri) > (0 : int)) ) ) }
  ensures {  ( ( [@GP_Pretty_Ada:21106] ((Train__carriage__rep.to_rep { Train__train.__split_fields = this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__numbcarri) < (Train__carriage__rep.to_rep (old { Train__train.__split_fields = this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__numbcarri ))) ) /\ (Train__train___axiom.dynamic_invariant { Train__train.__split_fields = this__split_fields.Train__train.__split_fields__content } True True True True) ) }
  writes {this__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "addrod" defined at train.ads:39, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Train__addrod___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Train__train as Train__train
 use        Train__train___axiom as Train__train___axiom
 use        Reactor__trainreactor as Reactor__trainreactor
 use        Reactor__statusonoff as Reactor__statusonoff
 use        Reactor__statusonoff__rep as Reactor__statusonoff__rep
 use        Reactor__rods as Reactor__rods
 use        Reactor__rods__rep as Reactor__rods__rep

 val addrod 
   (this__split_fields : Train__train.__split_fields__ref) : unit
  requires {  ( ( [@GP_Pretty_Ada:3138] ((Reactor__statusonoff__rep.to_rep { Train__train.__split_fields = this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__reac.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__onoff) = (0 : int)) ) /\ ( [@GP_Pretty_Ada:3146] ((Reactor__rods__rep.to_rep { Train__train.__split_fields = this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__reac.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__rod_number) < (5 : int)) ) ) }
  ensures {  ( ( [@GP_Pretty_Ada:21163] ((Reactor__rods__rep.to_rep { Train__train.__split_fields = this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__reac.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__rod_number) > (Reactor__rods__rep.to_rep (old { Train__train.__split_fields = this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__reac.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__rod_number ))) ) /\ (Train__train___axiom.dynamic_invariant { Train__train.__split_fields = this__split_fields.Train__train.__split_fields__content } True True True True) ) }
  writes {this__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "decreaserod" defined at train.ads:43, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Train__decreaserod___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Train__train as Train__train
 use        Train__train___axiom as Train__train___axiom
 use        Reactor__trainreactor as Reactor__trainreactor
 use        Reactor__statusonoff as Reactor__statusonoff
 use        Reactor__statusonoff__rep as Reactor__statusonoff__rep
 use        Reactor__rods as Reactor__rods
 use        Reactor__rods__rep as Reactor__rods__rep

 val decreaserod 
   (this__split_fields : Train__train.__split_fields__ref) : unit
  requires {  ( ( [@GP_Pretty_Ada:3193] ((Reactor__statusonoff__rep.to_rep { Train__train.__split_fields = this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__reac.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__onoff) = (0 : int)) ) /\ ( [@GP_Pretty_Ada:3201] ((Reactor__rods__rep.to_rep { Train__train.__split_fields = this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__reac.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__rod_number) > (1 : int)) ) ) }
  ensures {  ( ( [@GP_Pretty_Ada:21220] ((Reactor__rods__rep.to_rep { Train__train.__split_fields = this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__reac.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__rod_number) < (Reactor__rods__rep.to_rep (old { Train__train.__split_fields = this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__reac.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__rod_number ))) ) /\ (Train__train___axiom.dynamic_invariant { Train__train.__split_fields = this__split_fields.Train__train.__split_fields__content } True True True True) ) }
  writes {this__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "calculateweight" defined at train.ads:47, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Train__calculateweight___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Train__train as Train__train
 use        Train__train___axiom as Train__train___axiom
 use        Train__calculateweight as Train__calculateweight
 use        Reactor__trainreactor as Reactor__trainreactor
 use        Train__weight as Train__weight
 use        Train__weight___axiom as Train__weight___axiom
 use        Train__weight__rep as Train__weight__rep
 use        Reactor__statusonoff as Reactor__statusonoff
 use        Reactor__statusonoff__rep as Reactor__statusonoff__rep

 val calculateweight 
   (this : Train__train.train) : int
  requires {  ( ( ( [@GP_Pretty_Ada:3249] ((Reactor__statusonoff__rep.to_rep this.Train__train.__split_fields.Train__train.rec__train__train__reac.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__onoff) = (1 : int)) ) /\ ( [@GP_Pretty_Ada:3255] ((Train__weight__rep.to_rep this.Train__train.__split_fields.Train__train.rec__train__train__wei) >= (2000 : int)) ) ) /\ ( [@GP_Pretty_Ada:3263] ((Train__weight__rep.to_rep this.Train__train.__split_fields.Train__train.rec__train__train__wei) <= (22000 : int)) ) ) }
  ensures {  ( ( (result = (Train__calculateweight.calculateweight this)) /\ (Train__calculateweight.calculateweight__function_guard result this) )/\( (Train__weight___axiom.dynamic_invariant result True False True True) /\ ( ( [@GP_Pretty_Ada:3273] (result >= (2000 : int)) ) /\ ( [@GP_Pretty_Ada:3279] (result <= (22000 : int)) ) ) ) ) }
 
 axiom calculateweight__post_axiom :
  (forall this   : Train__train.train [(Train__calculateweight.calculateweight this)].
   ( ( (Train__train___axiom.dynamic_invariant this True True True True) /\ ( ( ( [@GP_Pretty_Ada:3249] ((Reactor__statusonoff__rep.to_rep this.Train__train.__split_fields.Train__train.rec__train__train__reac.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__onoff) = (1 : int)) ) /\ ( [@GP_Pretty_Ada:3255] ((Train__weight__rep.to_rep this.Train__train.__split_fields.Train__train.rec__train__train__wei) >= (2000 : int)) ) ) /\ ( [@GP_Pretty_Ada:3263] ((Train__weight__rep.to_rep this.Train__train.__split_fields.Train__train.rec__train__train__wei) <= (22000 : int)) ) ) ) -> (let result = (Train__calculateweight.calculateweight this) in (
    (if ((Train__calculateweight.calculateweight__function_guard result this)) then (
     ( ( ( ( [@GP_Pretty_Ada:3273] (result >= (2000 : int)) ) /\ ( [@GP_Pretty_Ada:3279] (result <= (22000 : int)) ) ) /\ (Train__weight___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "calctemp" defined at train.ads:51, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Train__calctemp___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Train__train as Train__train
 use        Train__train___axiom as Train__train___axiom
 use        Train__calctemp as Train__calctemp
 use        Reactor__trainreactor as Reactor__trainreactor
 use        Reactor__temperature as Reactor__temperature
 use        Reactor__temperature___axiom as Reactor__temperature___axiom
 use        Reactor__temperature__rep as Reactor__temperature__rep

 val calctemp 
   (this : Train__train.train) : int
  requires {  ( ( [@GP_Pretty_Ada:3311] ((Reactor__temperature__rep.to_rep this.Train__train.__split_fields.Train__train.rec__train__train__reac.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__temp) >= (0 : int)) ) /\ ( [@GP_Pretty_Ada:3321] ((Reactor__temperature__rep.to_rep this.Train__train.__split_fields.Train__train.rec__train__train__reac.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__temp) <= (100 : int)) ) ) }
  ensures {  ( ( (result = (Train__calctemp.calctemp this)) /\ (Train__calctemp.calctemp__function_guard result this) )/\( (Reactor__temperature___axiom.dynamic_invariant result True False True True) /\ ( ( [@GP_Pretty_Ada:3331] (result >= (0 : int)) ) /\ ( [@GP_Pretty_Ada:3339] (result <= (100 : int)) ) ) ) ) }
 
 axiom calctemp__post_axiom :
  (forall this   : Train__train.train [(Train__calctemp.calctemp this)].
   ( ( (Train__train___axiom.dynamic_invariant this True True True True) /\ ( ( [@GP_Pretty_Ada:3311] ((Reactor__temperature__rep.to_rep this.Train__train.__split_fields.Train__train.rec__train__train__reac.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__temp) >= (0 : int)) ) /\ ( [@GP_Pretty_Ada:3321] ((Reactor__temperature__rep.to_rep this.Train__train.__split_fields.Train__train.rec__train__train__reac.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__temp) <= (100 : int)) ) ) ) -> (let result = (Train__calctemp.calctemp this) in (
    (if ((Train__calctemp.calctemp__function_guard result this)) then (
     ( ( ( ( [@GP_Pretty_Ada:3331] (result >= (0 : int)) ) /\ ( [@GP_Pretty_Ada:3339] (result <= (100 : int)) ) ) /\ (Reactor__temperature___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "line_length__2" defined at a-textio.ads:245, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__line_length__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val line_length__2 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) /\ true )/\(Ada__text_io__count___axiom.dynamic_invariant result True False True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
 
 axiom line_length__2__post_axiom :
  (forall ada__text_io__standard_in   ada__text_io__file_system   ada__text_io__standard_out   ada__text_io__standard_err   ada__text_io__current_in   ada__text_io__current_out   ada__text_io__current_err   : Main.__private [(Ada__text_io__line_length__2.line_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err)].
   ( true -> (let result = (Ada__text_io__line_length__2.line_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err) in (
    ( ( true /\ (Ada__text_io__count___axiom.dynamic_invariant result True False True True) )/\true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "page_length__2" defined at a-textio.ads:251, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__page_length__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val page_length__2 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) /\ true )/\(Ada__text_io__count___axiom.dynamic_invariant result True False True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
 
 axiom page_length__2__post_axiom :
  (forall ada__text_io__standard_in   ada__text_io__file_system   ada__text_io__standard_out   ada__text_io__standard_err   ada__text_io__current_in   ada__text_io__current_out   ada__text_io__current_err   : Main.__private [(Ada__text_io__page_length__2.page_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err)].
   ( true -> (let result = (Ada__text_io__page_length__2.page_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err) in (
    ( ( true /\ (Ada__text_io__count___axiom.dynamic_invariant result True False True True) )/\true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "calculatepower" defined at reactor.ads:41, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Reactor__calculatepower___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Reactor__trainreactor as Reactor__trainreactor
 use        Reactor__calculatepower as Reactor__calculatepower
 use        Reactor__power___axiom as Reactor__power___axiom
 use        Reactor__trainreactor___axiom as Reactor__trainreactor___axiom

 val calculatepower 
   (this : Reactor__trainreactor.trainreactor) : int
  requires {  true }
  ensures {  ( ( (result = (Reactor__calculatepower.calculatepower this)) /\ (Reactor__calculatepower.calculatepower__function_guard result this) )/\( (Reactor__power___axiom.dynamic_invariant result True False True True) /\ ( ( [@GP_Pretty_Ada:3682] (result >= (0 : int)) ) /\ ( [@GP_Pretty_Ada:3690] (result <= (5200 : int)) ) ) ) ) }
 
 axiom calculatepower__post_axiom :
  (forall this   : Reactor__trainreactor.trainreactor [(Reactor__calculatepower.calculatepower this)].
   ( (Reactor__trainreactor___axiom.dynamic_invariant this True True True True) -> (let result = (Reactor__calculatepower.calculatepower this) in (
    (if ((Reactor__calculatepower.calculatepower__function_guard result this)) then (
     ( ( ( ( [@GP_Pretty_Ada:3682] (result >= (0 : int)) ) /\ ( [@GP_Pretty_Ada:3690] (result <= (5200 : int)) ) ) /\ (Reactor__power___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    ))

end

(* Module for checking absence of run-time errors and package initial condition on package elaboration of "train" defined at train.ads:3, created in Gnat2Why.Subprograms.Generate_VCs_For_Package_Elaboration *)
module Train__package_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Train__reactorweight as Train__reactorweight
 use        Train__carriageweight as Train__carriageweight
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Train__weight___axiom as Train__weight___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Train__weight___axiom as Train__weight___axiom
 use        Train__reactorweight___axiom as Train__reactorweight___axiom
 use        Train__carriageweight___axiom as Train__carriageweight___axiom
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__line_length__2___axiom as Ada__text_io__line_length__2___axiom
 use        Ada__text_io__page_length__2___axiom as Ada__text_io__page_length__2___axiom

 let def [#"train.ads" 3 0 0][@GP_Subp:train.ads:3] 
   (__void_param : unit)
  requires { [#"train.ads" 3 0 0] true }
   = [@vc:divergent]
  ( ();
  ([#"train.ads" 3 0 0] ());
  ([#"train.ads" 5 0 0] ());
  ([#"train.ads" 7 0 0] ());
  ([#"train.ads" 8 0 0] ());
  ([#"train.ads" 8 0 0] ());
  ([#"train.ads" 8 0 0] ( [#"train.ads" 8 0 0] begin ensures {true} let _ = (let _ = (2000 : int) in (
   ()))
   in () end ;
  [#"train.ads" 8 0 0] assume { [#"train.ads" 8 0 0] (Train__weight___axiom.dynamic_invariant Train__reactorweight.reactorweight True False True True) } ));
  ([#"train.ads" 9 0 0] ( [#"train.ads" 9 0 0] begin ensures {true} let _ = (let _ = (2000 : int) in (
   ()))
   in () end ;
  [#"train.ads" 9 0 0] assume { [#"train.ads" 9 0 0] (Train__weight___axiom.dynamic_invariant Train__carriageweight.carriageweight True False True True) } ));
  ([#"train.ads" 11 0 0] ());
  ([#"train.ads" 16 0 0] ());
  ([#"train.ads" 16 0 0] ());
  ([#"train.ads" 18 0 0] ());
  ([#"train.ads" 18 0 0] ());
  ([#"train.ads" 14 0 0] ());
  ([#"train.ads" 22 0 0] ());
  ([#"train.ads" 25 0 0] ());
  ([#"train.ads" 23 0 0] ());
  ([#"train.ads" 31 0 0] ());
  ([#"train.ads" 33 0 0] ());
  ([#"train.ads" 32 0 0] ());
  ([#"train.ads" 35 0 0] ());
  ([#"train.ads" 37 0 0] ());
  ([#"train.ads" 36 0 0] ());
  ([#"train.ads" 39 0 0] ());
  ([#"train.ads" 41 0 0] ());
  ([#"train.ads" 40 0 0] ());
  ([#"train.ads" 43 0 0] ());
  ([#"train.ads" 45 0 0] ());
  ([#"train.ads" 44 0 0] ());
  ([#"train.ads" 47 0 0] ());
  ([#"train.ads" 49 0 0] ());
  ([#"train.ads" 48 0 0] ());
  ([#"train.ads" 51 0 0] ());
  ([#"train.ads" 53 0 0] ());
  ([#"train.ads" 52 0 0] ());
  ([#"train.ads" 52 0 0] ());
  ([#"train.ads" 52 0 0] ());
  ([#"train.ads" 52 0 0] ());
  ([#"train.ads" 52 0 0] ());
  ([#"train.ads" 52 0 0] ());
  ([#"train.ads" 52 0 0] ());
  ([#"train.ads" 52 0 0] ());
  ([#"train.ads" 52 0 0] ());
   assume {  ( ((Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) = (0 : int)) /\ ((Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) = (0 : int)) ) };
  ();
  ([#"train.adb" 5 0 0] ());
  ([#"train.adb" 7 0 0] ());
  ([#"train.adb" 47 0 0] ());
  ([#"train.adb" 57 0 0] ());
  ([#"train.adb" 67 0 0] ());
  ([#"train.adb" 79 0 0] ());
  ([#"train.adb" 91 0 0] ());
  ([#"train.adb" 115 0 0] ());
  ();
  ( [@GP_Sloc:train.adb:129:1] ([#"train.adb" 129 0 0] ()) ) )
end

(* Module for checking contracts and absence of run-time errors in subprogram "calculatespeed" defined at train.ads:22, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Train__calculatespeed__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Float32 as Float32
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__float___axiom as Standard__float___axiom
 use        Train__train as Train__train
 use        Train__calculatespeed__this as Train__calculatespeed__this
 use        Train__train___axiom as Train__train___axiom
 use        Train__calculatespeed__spfloat as Train__calculatespeed__spfloat
 use        Train__calculatespeed__spee as Train__calculatespeed__spee
 use        Reactor__trainreactor as Reactor__trainreactor
 use        Train__speed as Train__speed
 use        Train__speed___axiom as Train__speed___axiom
 use        Train__weight as Train__weight
 use        Train__weight__rep as Train__weight__rep
 use        Reactor__power as Reactor__power
 use        Reactor__power__rep as Reactor__power__rep
 use        Standard__float___axiom as Standard__float___axiom
 use        Train__calculatespeed__spfloat___axiom as Train__calculatespeed__spfloat___axiom
 use        Train__calculatespeed__spee___axiom as Train__calculatespeed__spee___axiom
 use        Train__speed___axiom as Train__speed___axiom
 use        Train__weight___axiom as Train__weight___axiom
 use        Train__carriage___axiom as Train__carriage___axiom
 use        Train__train___axiom as Train__train___axiom
 use        Train__calculatespeed__this___axiom as Train__calculatespeed__this___axiom
 use        Reactor__power___axiom as Reactor__power___axiom
 use        Reactor__rods___axiom as Reactor__rods___axiom
 use        Reactor__statusonoff___axiom as Reactor__statusonoff___axiom
 use        Reactor__reactorstatus___axiom as Reactor__reactorstatus___axiom
 use        Reactor__temperature___axiom as Reactor__temperature___axiom
 use        Reactor__trainreactor___axiom as Reactor__trainreactor___axiom

 val train__calculatespeed__result [@model_trace:2936@result] [@model_projected] [@name:calculateSpeed]  : int__ref 
 
 let def [#"train.ads" 22 0 0][@GP_Subp:train.ads:22] 
   (__void_param : unit)
  requires { [#"train.ads" 22 0 0] true }
  ensures { [#"train.ads" 22 0 0] ([#"train.ads" 25 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Sloc:train.ads:25:14] [@comment:     Post => calculateSpeed'Result >= Speed'First  and calculateSpeed'Result <= Speed'Last;              ^ train.ads:25:14:VC_POSTCONDITION] [@model_vc_post] [@GP_Shape:pragargs__and] [@GP_Id:6] ( ( [@GP_Sloc:train.ads:25:14] [@GP_Pretty_Ada:3001] (train__calculatespeed__result.int__content >= (0 : int)) ) /\ ( [@GP_Pretty_Ada:3009] [@GP_Sloc:train.ads:25:56] (train__calculatespeed__result.int__content <= (100 : int)) ) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram train.ads:22 *)
  ;
   assume {  (Train__train___axiom.dynamic_invariant Train__calculatespeed__this.this True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram train.ads:22 *)
  ;
  () (* Check for RTE in the Pre of the subprogram train.ads:22 *)
  ;
   begin ensures {true} let _ = (let _ = (Boolean.andb((Boolean.andb((Boolean.andb(((Train__weight__rep.to_rep(Train__calculatespeed__this.this.Train__train.__split_fields.Train__train.rec__train__train__wei)) >= (2000 : int))) (((Train__weight__rep.to_rep(Train__calculatespeed__this.this.Train__train.__split_fields.Train__train.rec__train__train__wei)) <= (22000 : int))))) (((Reactor__power__rep.to_rep(Train__calculatespeed__this.this.Train__train.__split_fields.Train__train.rec__train__train__reac.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__pow)) >= (0 : int))))) (((Reactor__power__rep.to_rep(Train__calculatespeed__this.this.Train__train.__split_fields.Train__train.rec__train__train__reac.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__pow)) <= (5200 : int)))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram train.ads:22 *)
  ;
   assume {  ( ( ( ( [@GP_Pretty_Ada:2963] ((Train__weight__rep.to_rep Train__calculatespeed__this.this.Train__train.__split_fields.Train__train.rec__train__train__wei) >= (2000 : int)) ) /\ ( [@GP_Pretty_Ada:2971] ((Train__weight__rep.to_rep Train__calculatespeed__this.this.Train__train.__split_fields.Train__train.rec__train__train__wei) <= (22000 : int)) ) ) /\ ( [@GP_Pretty_Ada:2981] ((Reactor__power__rep.to_rep Train__calculatespeed__this.this.Train__train.__split_fields.Train__train.rec__train__train__reac.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__pow) >= (0 : int)) ) ) /\ ( [@GP_Pretty_Ada:2991] ((Reactor__power__rep.to_rep Train__calculatespeed__this.this.Train__train.__split_fields.Train__train.rec__train__train__reac.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__pow) <= (5200 : int)) ) ) };
   try
   ( ();
   ([#"train.adb" 10 0 0] ( [#"train.adb" 10 0 0] assume { [#"train.adb" 10 0 0] (Standard__float___axiom.default_initial_assumption Train__calculatespeed__spfloat.spfloat.Float32.t__content False) };
   [#"train.adb" 10 0 0] assume { [#"train.adb" 10 0 0] (Standard__float___axiom.dynamic_invariant Train__calculatespeed__spfloat.spfloat.Float32.t__content False False True True) } ));
   ([#"train.adb" 13 0 0] ( [#"train.adb" 13 0 0] assume { [#"train.adb" 13 0 0] (Train__speed___axiom.default_initial_assumption Train__calculatespeed__spee.spee.int__content False) };
   [#"train.adb" 13 0 0] assume { [#"train.adb" 13 0 0] (Train__speed___axiom.dynamic_invariant Train__calculatespeed__spee.spee.int__content False False True True) } ));
   ();
   ( [@GP_Sloc:train.adb:26:7] ([#"train.adb" 26 0 0] (if (( ([#"train.adb" 26 0 0] [#"train.adb" 26 0 0] (([@branch_id=2365] Main.spark__branch).bool__content <- ( ((Reactor__power__rep.to_rep(Train__calculatespeed__this.this.Train__train.__split_fields.Train__train.rec__train__train__reac.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__pow)) = (0 : int)) )));
   ( [@branch_id=2365] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:train.adb:27:10] ([#"train.adb" 27 0 0] ()) );
    ( [@GP_Sloc:train.adb:27:18] ([#"train.adb" 27 0 0] [#"train.adb" 27 0 0] (Train__calculatespeed__spfloat.spfloat.Float32.t__content <- ( (0.0E-1:Float32.t) ))) ) )) else (
    ( ();
    ( [@GP_Sloc:train.adb:29:10] ([#"train.adb" 29 0 0] ()) );
    ( [@GP_Sloc:train.adb:29:18] ([#"train.adb" 29 0 0] [#"train.adb" 29 0 0] (Train__calculatespeed__spfloat.spfloat.Float32.t__content <- ( (Float32.mul_rne(([#"train.adb" 29 0 0] ( [@vc:annotation] [@GP_Shape:if__spfloat_assign__mult__div] [@GP_Reason:VC_DIVISION_CHECK] [@comment:         SpFloat := Float(This.reac.pow) / Float(This.wei) * 100.0;                                          ^ train.adb:29:42:VC_DIVISION_CHECK] [@GP_Id:2] [@GP_Sloc:train.adb:29:42] (Float32.div_rne_((Float32.of_int_rne((Reactor__power__rep.to_rep(Train__calculatespeed__this.this.Train__train.__split_fields.Train__train.rec__train__train__reac.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__pow))))) ((Float32.of_int_rne((Train__weight__rep.to_rep(Train__calculatespeed__this.this.Train__train.__split_fields.Train__train.rec__train__train__wei)))))) ))) ((100.0:Float32.t))) ))) ) )))) );
   ( [@GP_Sloc:train.adb:32:10] ([#"train.adb" 32 0 0] ()) );
   ( [@GP_Sloc:train.adb:32:7] ([#"train.adb" 32 0 0] (if (( ([#"train.adb" 32 0 0] [#"train.adb" 32 0 0] (([@branch_id=2394] Main.spark__branch).bool__content <- ( (Float32.gt(Train__calculatespeed__spfloat.spfloat.Float32.t__content) ((100.0:Float32.t))) )));
   ( [@branch_id=2394] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:train.adb:33:9] ([#"train.adb" 33 0 0] ()) );
    ( [@GP_Sloc:train.adb:33:14] ([#"train.adb" 33 0 0] [#"train.adb" 33 0 0] (Train__calculatespeed__spee.spee.int__content <- ( (100 : int) ))) ) )) else (
    ( [@GP_Sloc:train.adb:34:7] (if (( ([#"train.adb" 34 0 0] [#"train.adb" 34 0 0] (([@branch_id=2401] Main.spark__branch).bool__content <- ( (Float32.eq(Train__calculatespeed__spfloat.spfloat.Float32.t__content) ((0.0E-1:Float32.t))) )));
    ( [@branch_id=2401] Main.spark__branch ).bool__content )) then (
     ( ();
     ( [@GP_Sloc:train.adb:35:12] ([#"train.adb" 35 0 0] ()) );
     ( [@GP_Sloc:train.adb:35:17] ([#"train.adb" 35 0 0] [#"train.adb" 35 0 0] (Train__calculatespeed__spee.spee.int__content <- ( (0 : int) ))) ) )) else (
     ( ();
     ( [@GP_Sloc:train.adb:37:9] ([#"train.adb" 37 0 0] ()) );
     ( [@GP_Sloc:train.adb:37:23] ([#"train.adb" 37 0 0] ()) );
     ( [@GP_Sloc:train.adb:37:14] ([#"train.adb" 37 0 0] [#"train.adb" 37 0 0] (Train__calculatespeed__spee.spee.int__content <- ( ([#"train.adb" 37 0 0] ( [@vc:annotation] [@comment:        Spee := Speed(SpFloat);                       ^ train.adb:37:23:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] [@GP_Sloc:train.adb:37:23] [@GP_Id:5] [@GP_Shape:if__spee_assign__typeconv] (Train__speed.range_check_((Float32.to_int_rna(Train__calculatespeed__spfloat.spfloat.Float32.t__content)))) )) ))) ) ))) )))) );
   ( [@GP_Sloc:train.adb:40:14] ([#"train.adb" 40 0 0] ()) );
   ( [@GP_Sloc:train.adb:40:7] ([#"train.adb" 40 0 0] ( [#"train.adb" 40 0 0] (train__calculatespeed__result.int__content <- ( Train__calculatespeed__spee.spee.int__content ));
   [#"train.adb" 40 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = (Boolean.andb((train__calculatespeed__result.int__content >= (0 : int))) ((train__calculatespeed__result.int__content <= (100 : int)))) in (
   ()))
   in () end ;
  train__calculatespeed__result.int__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "addcarriage" defined at train.ads:31, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Train__addcarriage__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Train__train as Train__train
 use        Train__addcarriage__this as Train__addcarriage__this
 use        Train__train___axiom as Train__train___axiom
 use        Train__calculateweight___axiom as Train__calculateweight___axiom
 use        Reactor__trainreactor as Reactor__trainreactor
 use        Train__weight as Train__weight
 use        Train__weight__rep as Train__weight__rep
 use        Train__carriage as Train__carriage
 use        Train__carriage__rep as Train__carriage__rep
 use        Reactor__statusonoff as Reactor__statusonoff
 use        Reactor__statusonoff__rep as Reactor__statusonoff__rep
 use        Train__speed___axiom as Train__speed___axiom
 use        Train__weight___axiom as Train__weight___axiom
 use        Train__carriage___axiom as Train__carriage___axiom
 use        Train__train___axiom as Train__train___axiom
 use        Train__addcarriage__this___axiom as Train__addcarriage__this___axiom
 use        Train__calculateweight___axiom as Train__calculateweight___axiom
 use        Reactor__power___axiom as Reactor__power___axiom
 use        Reactor__rods___axiom as Reactor__rods___axiom
 use        Reactor__statusonoff___axiom as Reactor__statusonoff___axiom
 use        Reactor__reactorstatus___axiom as Reactor__reactorstatus___axiom
 use        Reactor__temperature___axiom as Reactor__temperature___axiom
 use        Reactor__trainreactor___axiom as Reactor__trainreactor___axiom

 let def [#"train.ads" 31 0 0][@GP_Subp:train.ads:31] 
   (__void_param : unit)
  requires { [#"train.ads" 31 0 0] true }
  ensures { [#"train.ads" 31 0 0] ([#"train.ads" 33 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Shape:pragargs__cmp] [@comment:     Post => This.numbCarri > This.numbCarri'Old;              ^ train.ads:33:14:VC_POSTCONDITION] [@GP_Sloc:train.ads:33:14] [@model_vc_post] [@GP_Id:9] ( [@GP_Pretty_Ada:21055] [@GP_Sloc:train.ads:33:14] ((Train__carriage__rep.to_rep { Train__train.__split_fields = Train__addcarriage__this.this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__numbcarri) > (Train__carriage__rep.to_rep (old { Train__train.__split_fields = Train__addcarriage__this.this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__numbcarri ))) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram train.ads:31 *)
  ;
   assume {  (Train__train___axiom.dynamic_invariant { Train__train.__split_fields = Train__addcarriage__this.this__split_fields.Train__train.__split_fields__content } True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram train.ads:31 *)
  ;
  () (* Check for RTE in the Pre of the subprogram train.ads:31 *)
  ;
   begin ensures {true} let _ = (let _ = (Boolean.andb(((Reactor__statusonoff__rep.to_rep({ Train__train.__split_fields = Train__addcarriage__this.this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__reac.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__onoff)) = (1 : int))) (((Train__carriage__rep.to_rep({ Train__train.__split_fields = Train__addcarriage__this.this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__numbcarri)) < (10 : int)))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram train.ads:31 *)
  ;
   assume {  ( ( [@GP_Pretty_Ada:3040] ((Reactor__statusonoff__rep.to_rep { Train__train.__split_fields = Train__addcarriage__this.this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__reac.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__onoff) = (1 : int)) ) /\ ( [@GP_Pretty_Ada:3046] ((Train__carriage__rep.to_rep { Train__train.__split_fields = Train__addcarriage__this.this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__numbcarri) < (10 : int)) ) ) };
   begin ensures {true} let _ = (let _ = { Train__train.__split_fields = Train__addcarriage__this.this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__numbcarri in (
   ()))
   in () end ;
  (let temp___old_253 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
  ensures { (result = (Train__carriage__rep.to_rep { Train__train.__split_fields = Train__addcarriage__this.this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__numbcarri))} 
  in _f) in (
   (  try
    ( ();
    ( [@GP_Sloc:train.adb:49:7] ([#"train.adb" 49 0 0] (if (( ([#"train.adb" 49 0 0] [#"train.adb" 49 0 0] (([@branch_id=2439] Main.spark__branch).bool__content <- ( (Boolean.andb(((Reactor__statusonoff__rep.to_rep({ Train__train.__split_fields = Train__addcarriage__this.this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__reac.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__onoff)) = (1 : int))) (((Train__carriage__rep.to_rep({ Train__train.__split_fields = Train__addcarriage__this.this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__numbcarri)) < (10 : int)))) )));
    ( [@branch_id=2439] Main.spark__branch ).bool__content )) then (
     ( ();
     ( [@GP_Sloc:train.adb:50:25] ([#"train.adb" 50 0 0] (let temp___250 [@mlw:proxy_symbol] [@introduced] = (let temp___249 [@mlw:proxy_symbol] [@introduced] = { Train__train.__split_fields = Train__addcarriage__this.this__split_fields.Train__train.__split_fields__content } in (
      ( [#"train.adb" 50 0 0] begin ensures {true} let _ = (let _ = temp___249.Train__train.__split_fields.Train__train.rec__train__train__numbcarri in (
       ()))
       in () end ;
      { ( temp___249 ) with Train__train.__split_fields = { ( temp___249.Train__train.__split_fields ) with Train__train.rec__train__train__numbcarri = (Train__carriage__rep.of_rep(([#"train.adb" 50 0 0] ( [@comment:         This.numbCarri := This.numbCarri + 1;                                           ^ train.adb:50:43:VC_RANGE_CHECK] [@vc:annotation] [@GP_Shape:if__this_assign__add] [@GP_Sloc:train.adb:50:43] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:7] (Train__carriage.range_check_(((Train__carriage__rep.to_rep({ Train__train.__split_fields = Train__addcarriage__this.this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__numbcarri)) + (1 : int)))) )))) } } )))
      in (
       (Train__addcarriage__this.this__split_fields.Train__train.__split_fields__content <- ( temp___250.Train__train.__split_fields ))))
     ) );
     ( [@GP_Sloc:train.adb:51:22] ([#"train.adb" 51 0 0] ()) );
     ( [@GP_Sloc:train.adb:51:19] ([#"train.adb" 51 0 0] (let temp___252 [@mlw:proxy_symbol] [@introduced] = (let temp___251 [@mlw:proxy_symbol] [@introduced] = { Train__train.__split_fields = Train__addcarriage__this.this__split_fields.Train__train.__split_fields__content } in (
      ( [#"train.adb" 51 0 0] begin ensures {true} let _ = (let _ = temp___251.Train__train.__split_fields.Train__train.rec__train__train__wei in (
       ()))
       in () end ;
      { ( temp___251 ) with Train__train.__split_fields = { ( temp___251.Train__train.__split_fields ) with Train__train.rec__train__train__wei = (Train__weight__rep.of_rep(([#"train.adb" 51 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@comment:         This.wei := calculateWeight(This);                      ^ train.adb:51:22:VC_PRECONDITION] [@GP_Sloc:train.adb:51:22] [@GP_Id:8] [@GP_Shape:if__this_assign__call_calculateweight] (Train__calculateweight___axiom.calculateweight({ Train__train.__split_fields = Train__addcarriage__this.this__split_fields.Train__train.__split_fields__content })) )))) } } )))
      in (
       (Train__addcarriage__this.this__split_fields.Train__train.__split_fields__content <- ( temp___252.Train__train.__split_fields ))))
     ) ) )) else (
     ()))) );
     raise Return__exc )
   with
    Return__exc -> ()
   end;
    begin ensures {true} let _ = (let _ = ((Train__carriage__rep.to_rep({ Train__train.__split_fields = Train__addcarriage__this.this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__numbcarri)) > temp___old_253) in (
    ()))
    in () end  )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "decreasecarriage" defined at train.ads:35, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Train__decreasecarriage__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Train__train as Train__train
 use        Train__train___axiom as Train__train___axiom
 use        Train__decreasecarriage__this as Train__decreasecarriage__this
 use        Train__calculateweight___axiom as Train__calculateweight___axiom
 use        Reactor__trainreactor as Reactor__trainreactor
 use        Train__weight as Train__weight
 use        Train__weight__rep as Train__weight__rep
 use        Train__carriage as Train__carriage
 use        Train__carriage__rep as Train__carriage__rep
 use        Reactor__statusonoff as Reactor__statusonoff
 use        Reactor__statusonoff__rep as Reactor__statusonoff__rep
 use        Train__speed___axiom as Train__speed___axiom
 use        Train__weight___axiom as Train__weight___axiom
 use        Train__carriage___axiom as Train__carriage___axiom
 use        Train__train___axiom as Train__train___axiom
 use        Train__decreasecarriage__this___axiom as Train__decreasecarriage__this___axiom
 use        Train__calculateweight___axiom as Train__calculateweight___axiom
 use        Reactor__power___axiom as Reactor__power___axiom
 use        Reactor__rods___axiom as Reactor__rods___axiom
 use        Reactor__statusonoff___axiom as Reactor__statusonoff___axiom
 use        Reactor__reactorstatus___axiom as Reactor__reactorstatus___axiom
 use        Reactor__temperature___axiom as Reactor__temperature___axiom
 use        Reactor__trainreactor___axiom as Reactor__trainreactor___axiom

 let def [#"train.ads" 35 0 0][@GP_Subp:train.ads:35] 
   (__void_param : unit)
  requires { [#"train.ads" 35 0 0] true }
  ensures { [#"train.ads" 35 0 0] ([#"train.ads" 37 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Id:12] [@GP_Shape:pragargs__cmp] [@model_vc_post] [@comment:     Post => This.numbCarri < This.numbCarri'Old;              ^ train.ads:37:14:VC_POSTCONDITION] [@GP_Sloc:train.ads:37:14] ( [@GP_Sloc:train.ads:37:14] [@GP_Pretty_Ada:21106] ((Train__carriage__rep.to_rep { Train__train.__split_fields = Train__decreasecarriage__this.this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__numbcarri) < (Train__carriage__rep.to_rep (old { Train__train.__split_fields = Train__decreasecarriage__this.this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__numbcarri ))) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram train.ads:35 *)
  ;
   assume {  (Train__train___axiom.dynamic_invariant { Train__train.__split_fields = Train__decreasecarriage__this.this__split_fields.Train__train.__split_fields__content } True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram train.ads:35 *)
  ;
  () (* Check for RTE in the Pre of the subprogram train.ads:35 *)
  ;
   begin ensures {true} let _ = (let _ = (Boolean.andb(((Reactor__statusonoff__rep.to_rep({ Train__train.__split_fields = Train__decreasecarriage__this.this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__reac.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__onoff)) = (1 : int))) (((Train__carriage__rep.to_rep({ Train__train.__split_fields = Train__decreasecarriage__this.this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__numbcarri)) > (0 : int)))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram train.ads:35 *)
  ;
   assume {  ( ( [@GP_Pretty_Ada:3089] ((Reactor__statusonoff__rep.to_rep { Train__train.__split_fields = Train__decreasecarriage__this.this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__reac.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__onoff) = (1 : int)) ) /\ ( [@GP_Pretty_Ada:3095] ((Train__carriage__rep.to_rep { Train__train.__split_fields = Train__decreasecarriage__this.this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__numbcarri) > (0 : int)) ) ) };
   begin ensures {true} let _ = (let _ = { Train__train.__split_fields = Train__decreasecarriage__this.this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__numbcarri in (
   ()))
   in () end ;
  (let temp___old_258 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
  ensures { (result = (Train__carriage__rep.to_rep { Train__train.__split_fields = Train__decreasecarriage__this.this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__numbcarri))} 
  in _f) in (
   (  try
    ( ();
    ( [@GP_Sloc:train.adb:59:7] ([#"train.adb" 59 0 0] (if (( ([#"train.adb" 59 0 0] [#"train.adb" 59 0 0] (([@branch_id=2493] Main.spark__branch).bool__content <- ( (Boolean.andb(((Reactor__statusonoff__rep.to_rep({ Train__train.__split_fields = Train__decreasecarriage__this.this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__reac.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__onoff)) = (1 : int))) (((Train__carriage__rep.to_rep({ Train__train.__split_fields = Train__decreasecarriage__this.this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__numbcarri)) > (0 : int)))) )));
    ( [@branch_id=2493] Main.spark__branch ).bool__content )) then (
     ( ();
     ( [@GP_Sloc:train.adb:60:25] ([#"train.adb" 60 0 0] (let temp___255 [@mlw:proxy_symbol] [@introduced] = (let temp___254 [@mlw:proxy_symbol] [@introduced] = { Train__train.__split_fields = Train__decreasecarriage__this.this__split_fields.Train__train.__split_fields__content } in (
      ( [#"train.adb" 60 0 0] begin ensures {true} let _ = (let _ = temp___254.Train__train.__split_fields.Train__train.rec__train__train__numbcarri in (
       ()))
       in () end ;
      { ( temp___254 ) with Train__train.__split_fields = { ( temp___254.Train__train.__split_fields ) with Train__train.rec__train__train__numbcarri = (Train__carriage__rep.of_rep(([#"train.adb" 60 0 0] ( [@GP_Id:10] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:if__this_assign__sub] [@GP_Sloc:train.adb:60:43] [@comment:         This.numbCarri := This.numbCarri - 1;                                           ^ train.adb:60:43:VC_RANGE_CHECK] (Train__carriage.range_check_(((Train__carriage__rep.to_rep({ Train__train.__split_fields = Train__decreasecarriage__this.this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__numbcarri)) - (1 : int)))) )))) } } )))
      in (
       (Train__decreasecarriage__this.this__split_fields.Train__train.__split_fields__content <- ( temp___255.Train__train.__split_fields ))))
     ) );
     ( [@GP_Sloc:train.adb:61:22] ([#"train.adb" 61 0 0] ()) );
     ( [@GP_Sloc:train.adb:61:19] ([#"train.adb" 61 0 0] (let temp___257 [@mlw:proxy_symbol] [@introduced] = (let temp___256 [@mlw:proxy_symbol] [@introduced] = { Train__train.__split_fields = Train__decreasecarriage__this.this__split_fields.Train__train.__split_fields__content } in (
      ( [#"train.adb" 61 0 0] begin ensures {true} let _ = (let _ = temp___256.Train__train.__split_fields.Train__train.rec__train__train__wei in (
       ()))
       in () end ;
      { ( temp___256 ) with Train__train.__split_fields = { ( temp___256.Train__train.__split_fields ) with Train__train.rec__train__train__wei = (Train__weight__rep.of_rep(([#"train.adb" 61 0 0] ( [@GP_Id:11] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:train.adb:61:22] [@comment:         This.wei := calculateWeight(This);                      ^ train.adb:61:22:VC_PRECONDITION] [@GP_Shape:if__this_assign__call_calculateweight] (Train__calculateweight___axiom.calculateweight({ Train__train.__split_fields = Train__decreasecarriage__this.this__split_fields.Train__train.__split_fields__content })) )))) } } )))
      in (
       (Train__decreasecarriage__this.this__split_fields.Train__train.__split_fields__content <- ( temp___257.Train__train.__split_fields ))))
     ) ) )) else (
     ()))) );
     raise Return__exc )
   with
    Return__exc -> ()
   end;
    begin ensures {true} let _ = (let _ = ((Train__carriage__rep.to_rep({ Train__train.__split_fields = Train__decreasecarriage__this.this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__numbcarri)) < temp___old_258) in (
    ()))
    in () end  )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "addrod" defined at train.ads:39, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Train__addrod__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Train__train as Train__train
 use        Train__calculatespeed___axiom as Train__calculatespeed___axiom
 use        Train__train___axiom as Train__train___axiom
 use        Train__addrod__this as Train__addrod__this
 use        Train__calctemp___axiom as Train__calctemp___axiom
 use        Reactor__trainreactor as Reactor__trainreactor
 use        Reactor__calculatepower___axiom as Reactor__calculatepower___axiom
 use        Train__speed as Train__speed
 use        Train__speed__rep as Train__speed__rep
 use        Reactor__statusonoff as Reactor__statusonoff
 use        Reactor__statusonoff__rep as Reactor__statusonoff__rep
 use        Reactor__temperature as Reactor__temperature
 use        Reactor__temperature__rep as Reactor__temperature__rep
 use        Reactor__rods as Reactor__rods
 use        Reactor__rods__rep as Reactor__rods__rep
 use        Reactor__power as Reactor__power
 use        Reactor__power__rep as Reactor__power__rep
 use        Train__speed___axiom as Train__speed___axiom
 use        Train__weight___axiom as Train__weight___axiom
 use        Train__carriage___axiom as Train__carriage___axiom
 use        Train__train___axiom as Train__train___axiom
 use        Train__calculatespeed___axiom as Train__calculatespeed___axiom
 use        Train__addrod__this___axiom as Train__addrod__this___axiom
 use        Train__calctemp___axiom as Train__calctemp___axiom
 use        Reactor__power___axiom as Reactor__power___axiom
 use        Reactor__rods___axiom as Reactor__rods___axiom
 use        Reactor__statusonoff___axiom as Reactor__statusonoff___axiom
 use        Reactor__reactorstatus___axiom as Reactor__reactorstatus___axiom
 use        Reactor__temperature___axiom as Reactor__temperature___axiom
 use        Reactor__trainreactor___axiom as Reactor__trainreactor___axiom
 use        Reactor__calculatepower___axiom as Reactor__calculatepower___axiom

 let def [#"train.ads" 39 0 0][@GP_Subp:train.ads:39] 
   (__void_param : unit)
  requires { [#"train.ads" 39 0 0] true }
  ensures { [#"train.ads" 39 0 0] ([#"train.ads" 41 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Id:16] [@GP_Shape:pragargs__cmp] [@comment:     Post => This.reac.rod_number > This.reac.rod_number'Old;              ^ train.ads:41:14:VC_POSTCONDITION] [@model_vc_post] [@GP_Sloc:train.ads:41:14] ( [@GP_Pretty_Ada:21163] [@GP_Sloc:train.ads:41:14] ((Reactor__rods__rep.to_rep { Train__train.__split_fields = Train__addrod__this.this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__reac.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__rod_number) > (Reactor__rods__rep.to_rep (old { Train__train.__split_fields = Train__addrod__this.this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__reac.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__rod_number ))) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram train.ads:39 *)
  ;
   assume {  (Train__train___axiom.dynamic_invariant { Train__train.__split_fields = Train__addrod__this.this__split_fields.Train__train.__split_fields__content } True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram train.ads:39 *)
  ;
  () (* Check for RTE in the Pre of the subprogram train.ads:39 *)
  ;
   begin ensures {true} let _ = (let _ = ( ((Reactor__statusonoff__rep.to_rep({ Train__train.__split_fields = Train__addrod__this.this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__reac.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__onoff)) = (0 : int)) && ((Reactor__rods__rep.to_rep({ Train__train.__split_fields = Train__addrod__this.this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__reac.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__rod_number)) < (5 : int)) ) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram train.ads:39 *)
  ;
   assume {  ( ( [@GP_Pretty_Ada:3138] ((Reactor__statusonoff__rep.to_rep { Train__train.__split_fields = Train__addrod__this.this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__reac.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__onoff) = (0 : int)) ) /\ ( [@GP_Pretty_Ada:3146] ((Reactor__rods__rep.to_rep { Train__train.__split_fields = Train__addrod__this.this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__reac.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__rod_number) < (5 : int)) ) ) };
   begin ensures {true} let _ = (let _ = { Train__train.__split_fields = Train__addrod__this.this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__reac.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__rod_number in (
   ()))
   in () end ;
  (let temp___old_270 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
  ensures { (result = (Reactor__rods__rep.to_rep { Train__train.__split_fields = Train__addrod__this.this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__reac.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__rod_number))} 
  in _f) in (
   (  try
    ( ();
    ( [@GP_Sloc:train.adb:69:7] ([#"train.adb" 69 0 0] (if (( ([#"train.adb" 69 0 0] [#"train.adb" 69 0 0] (([@branch_id=2547] Main.spark__branch).bool__content <- ( (Boolean.andb(((Reactor__statusonoff__rep.to_rep({ Train__train.__split_fields = Train__addrod__this.this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__reac.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__onoff)) = (0 : int))) (((Reactor__rods__rep.to_rep({ Train__train.__split_fields = Train__addrod__this.this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__reac.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__rod_number)) < (5 : int)))) )));
    ( [@branch_id=2547] Main.spark__branch ).bool__content )) then (
     ( ();
     ( [@GP_Sloc:train.adb:70:31] ([#"train.adb" 70 0 0] (let temp___261 [@mlw:proxy_symbol] [@introduced] = (let temp___260 [@mlw:proxy_symbol] [@introduced] = { Train__train.__split_fields = Train__addrod__this.this__split_fields.Train__train.__split_fields__content } in (
      ( [#"train.adb" 70 0 0] begin ensures {true} let _ = (let _ = temp___260.Train__train.__split_fields.Train__train.rec__train__train__reac in (
       ()))
       in () end ;
      { ( temp___260 ) with Train__train.__split_fields = { ( temp___260.Train__train.__split_fields ) with Train__train.rec__train__train__reac = (let temp___259 [@mlw:proxy_symbol] [@introduced] = { Train__train.__split_fields = Train__addrod__this.this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__reac in (
       ( [#"train.adb" 70 0 0] begin ensures {true} let _ = (let _ = temp___259.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__rod_number in (
        ()))
        in () end ;
       { ( temp___259 ) with Reactor__trainreactor.__split_fields = { ( temp___259.Reactor__trainreactor.__split_fields ) with Reactor__trainreactor.rec__reactor__trainreactor__rod_number = (Reactor__rods__rep.of_rep(([#"train.adb" 70 0 0] ( [@GP_Id:13] [@vc:annotation] [@GP_Shape:if__this_assign__add] [@GP_Sloc:train.adb:70:55] [@comment:         This.reac.rod_number := This.reac.rod_number + 1;                                                       ^ train.adb:70:55:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] (Reactor__rods.range_check_(((Reactor__rods__rep.to_rep({ Train__train.__split_fields = Train__addrod__this.this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__reac.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__rod_number)) + (1 : int)))) )))) } } )))
       } } )))
      in (
       (Train__addrod__this.this__split_fields.Train__train.__split_fields__content <- ( temp___261.Train__train.__split_fields ))))
     ) );
     ( [@GP_Sloc:train.adb:71:27] ([#"train.adb" 71 0 0] ()) );
     ( [@GP_Sloc:train.adb:71:24] ([#"train.adb" 71 0 0] (let temp___264 [@mlw:proxy_symbol] [@introduced] = (let temp___263 [@mlw:proxy_symbol] [@introduced] = { Train__train.__split_fields = Train__addrod__this.this__split_fields.Train__train.__split_fields__content } in (
      ( [#"train.adb" 71 0 0] begin ensures {true} let _ = (let _ = temp___263.Train__train.__split_fields.Train__train.rec__train__train__reac in (
       ()))
       in () end ;
      { ( temp___263 ) with Train__train.__split_fields = { ( temp___263.Train__train.__split_fields ) with Train__train.rec__train__train__reac = (let temp___262 [@mlw:proxy_symbol] [@introduced] = { Train__train.__split_fields = Train__addrod__this.this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__reac in (
       ( [#"train.adb" 71 0 0] begin ensures {true} let _ = (let _ = temp___262.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__pow in (
        ()))
        in () end ;
       { ( temp___262 ) with Reactor__trainreactor.__split_fields = { ( temp___262.Reactor__trainreactor.__split_fields ) with Reactor__trainreactor.rec__reactor__trainreactor__pow = (Reactor__power__rep.of_rep((Reactor__calculatepower___axiom.calculatepower({ Train__train.__split_fields = Train__addrod__this.this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__reac)))) } } )))
       } } )))
      in (
      [#"train.adb" 71 0 0] (Train__addrod__this.this__split_fields.Train__train.__split_fields__content <- ( temp___264.Train__train.__split_fields ))))
     ) );
     ( [@GP_Sloc:train.adb:72:21] ([#"train.adb" 72 0 0] ()) );
     ( [@GP_Sloc:train.adb:72:18] ([#"train.adb" 72 0 0] (let temp___266 [@mlw:proxy_symbol] [@introduced] = (let temp___265 [@mlw:proxy_symbol] [@introduced] = { Train__train.__split_fields = Train__addrod__this.this__split_fields.Train__train.__split_fields__content } in (
      ( [#"train.adb" 72 0 0] begin ensures {true} let _ = (let _ = temp___265.Train__train.__split_fields.Train__train.rec__train__train__sp in (
       ()))
       in () end ;
      { ( temp___265 ) with Train__train.__split_fields = { ( temp___265.Train__train.__split_fields ) with Train__train.rec__train__train__sp = (Train__speed__rep.of_rep(([#"train.adb" 72 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Id:14] [@vc:annotation] [@GP_Shape:if__this_assign__call_calculatespeed] [@comment:         This.sp := calculateSpeed(This);                     ^ train.adb:72:21:VC_PRECONDITION] [@GP_Sloc:train.adb:72:21] (Train__calculatespeed___axiom.calculatespeed({ Train__train.__split_fields = Train__addrod__this.this__split_fields.Train__train.__split_fields__content })) )))) } } )))
      in (
       (Train__addrod__this.this__split_fields.Train__train.__split_fields__content <- ( temp___266.Train__train.__split_fields ))))
     ) );
     ( [@GP_Sloc:train.adb:74:28] ([#"train.adb" 74 0 0] ()) );
     ( [@GP_Sloc:train.adb:74:25] ([#"train.adb" 74 0 0] (let temp___269 [@mlw:proxy_symbol] [@introduced] = (let temp___268 [@mlw:proxy_symbol] [@introduced] = { Train__train.__split_fields = Train__addrod__this.this__split_fields.Train__train.__split_fields__content } in (
      ( [#"train.adb" 74 0 0] begin ensures {true} let _ = (let _ = temp___268.Train__train.__split_fields.Train__train.rec__train__train__reac in (
       ()))
       in () end ;
      { ( temp___268 ) with Train__train.__split_fields = { ( temp___268.Train__train.__split_fields ) with Train__train.rec__train__train__reac = (let temp___267 [@mlw:proxy_symbol] [@introduced] = { Train__train.__split_fields = Train__addrod__this.this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__reac in (
       ( [#"train.adb" 74 0 0] begin ensures {true} let _ = (let _ = temp___267.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__temp in (
        ()))
        in () end ;
       { ( temp___267 ) with Reactor__trainreactor.__split_fields = { ( temp___267.Reactor__trainreactor.__split_fields ) with Reactor__trainreactor.rec__reactor__trainreactor__temp = (Reactor__temperature__rep.of_rep(([#"train.adb" 74 0 0] ( [@GP_Sloc:train.adb:74:28] [@GP_Reason:VC_PRECONDITION] [@GP_Id:15] [@vc:annotation] [@comment:         This.reac.temp := calcTemp(This);                            ^ train.adb:74:28:VC_PRECONDITION] [@GP_Shape:if__this_assign__call_calctemp] (Train__calctemp___axiom.calctemp({ Train__train.__split_fields = Train__addrod__this.this__split_fields.Train__train.__split_fields__content })) )))) } } )))
       } } )))
      in (
       (Train__addrod__this.this__split_fields.Train__train.__split_fields__content <- ( temp___269.Train__train.__split_fields ))))
     ) ) )) else (
     ()))) );
     raise Return__exc )
   with
    Return__exc -> ()
   end;
    begin ensures {true} let _ = (let _ = ((Reactor__rods__rep.to_rep({ Train__train.__split_fields = Train__addrod__this.this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__reac.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__rod_number)) > temp___old_270) in (
    ()))
    in () end  )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "decreaserod" defined at train.ads:43, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Train__decreaserod__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Train__train as Train__train
 use        Train__calculatespeed___axiom as Train__calculatespeed___axiom
 use        Train__train___axiom as Train__train___axiom
 use        Train__decreaserod__this as Train__decreaserod__this
 use        Train__calctemp___axiom as Train__calctemp___axiom
 use        Reactor__trainreactor as Reactor__trainreactor
 use        Reactor__calculatepower___axiom as Reactor__calculatepower___axiom
 use        Train__speed as Train__speed
 use        Train__speed__rep as Train__speed__rep
 use        Reactor__statusonoff as Reactor__statusonoff
 use        Reactor__statusonoff__rep as Reactor__statusonoff__rep
 use        Reactor__temperature as Reactor__temperature
 use        Reactor__temperature__rep as Reactor__temperature__rep
 use        Reactor__rods as Reactor__rods
 use        Reactor__rods__rep as Reactor__rods__rep
 use        Reactor__power as Reactor__power
 use        Reactor__power__rep as Reactor__power__rep
 use        Train__speed___axiom as Train__speed___axiom
 use        Train__weight___axiom as Train__weight___axiom
 use        Train__carriage___axiom as Train__carriage___axiom
 use        Train__train___axiom as Train__train___axiom
 use        Train__calculatespeed___axiom as Train__calculatespeed___axiom
 use        Train__decreaserod__this___axiom as Train__decreaserod__this___axiom
 use        Train__calctemp___axiom as Train__calctemp___axiom
 use        Reactor__power___axiom as Reactor__power___axiom
 use        Reactor__rods___axiom as Reactor__rods___axiom
 use        Reactor__statusonoff___axiom as Reactor__statusonoff___axiom
 use        Reactor__reactorstatus___axiom as Reactor__reactorstatus___axiom
 use        Reactor__temperature___axiom as Reactor__temperature___axiom
 use        Reactor__trainreactor___axiom as Reactor__trainreactor___axiom
 use        Reactor__calculatepower___axiom as Reactor__calculatepower___axiom

 let def [#"train.ads" 43 0 0][@GP_Subp:train.ads:43] 
   (__void_param : unit)
  requires { [#"train.ads" 43 0 0] true }
  ensures { [#"train.ads" 43 0 0] ([#"train.ads" 45 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Sloc:train.ads:45:14] [@GP_Shape:pragargs__cmp] [@model_vc_post] [@GP_Id:20] [@comment:     Post => This.reac.rod_number < This.reac.rod_number'Old;              ^ train.ads:45:14:VC_POSTCONDITION] ( [@GP_Sloc:train.ads:45:14] [@GP_Pretty_Ada:21220] ((Reactor__rods__rep.to_rep { Train__train.__split_fields = Train__decreaserod__this.this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__reac.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__rod_number) < (Reactor__rods__rep.to_rep (old { Train__train.__split_fields = Train__decreaserod__this.this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__reac.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__rod_number ))) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram train.ads:43 *)
  ;
   assume {  (Train__train___axiom.dynamic_invariant { Train__train.__split_fields = Train__decreaserod__this.this__split_fields.Train__train.__split_fields__content } True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram train.ads:43 *)
  ;
  () (* Check for RTE in the Pre of the subprogram train.ads:43 *)
  ;
   begin ensures {true} let _ = (let _ = ( ((Reactor__statusonoff__rep.to_rep({ Train__train.__split_fields = Train__decreaserod__this.this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__reac.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__onoff)) = (0 : int)) && ((Reactor__rods__rep.to_rep({ Train__train.__split_fields = Train__decreaserod__this.this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__reac.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__rod_number)) > (1 : int)) ) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram train.ads:43 *)
  ;
   assume {  ( ( [@GP_Pretty_Ada:3193] ((Reactor__statusonoff__rep.to_rep { Train__train.__split_fields = Train__decreaserod__this.this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__reac.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__onoff) = (0 : int)) ) /\ ( [@GP_Pretty_Ada:3201] ((Reactor__rods__rep.to_rep { Train__train.__split_fields = Train__decreaserod__this.this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__reac.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__rod_number) > (1 : int)) ) ) };
   begin ensures {true} let _ = (let _ = { Train__train.__split_fields = Train__decreaserod__this.this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__reac.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__rod_number in (
   ()))
   in () end ;
  (let temp___old_282 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
  ensures { (result = (Reactor__rods__rep.to_rep { Train__train.__split_fields = Train__decreaserod__this.this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__reac.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__rod_number))} 
  in _f) in (
   (  try
    ( ();
    ( [@GP_Sloc:train.adb:81:7] ([#"train.adb" 81 0 0] (if (( ([#"train.adb" 81 0 0] [#"train.adb" 81 0 0] (([@branch_id=2627] Main.spark__branch).bool__content <- ( (Boolean.andb(((Reactor__statusonoff__rep.to_rep({ Train__train.__split_fields = Train__decreaserod__this.this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__reac.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__onoff)) = (0 : int))) (((Reactor__rods__rep.to_rep({ Train__train.__split_fields = Train__decreaserod__this.this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__reac.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__rod_number)) > (1 : int)))) )));
    ( [@branch_id=2627] Main.spark__branch ).bool__content )) then (
     ( ();
     ( [@GP_Sloc:train.adb:82:31] ([#"train.adb" 82 0 0] (let temp___273 [@mlw:proxy_symbol] [@introduced] = (let temp___272 [@mlw:proxy_symbol] [@introduced] = { Train__train.__split_fields = Train__decreaserod__this.this__split_fields.Train__train.__split_fields__content } in (
      ( [#"train.adb" 82 0 0] begin ensures {true} let _ = (let _ = temp___272.Train__train.__split_fields.Train__train.rec__train__train__reac in (
       ()))
       in () end ;
      { ( temp___272 ) with Train__train.__split_fields = { ( temp___272.Train__train.__split_fields ) with Train__train.rec__train__train__reac = (let temp___271 [@mlw:proxy_symbol] [@introduced] = { Train__train.__split_fields = Train__decreaserod__this.this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__reac in (
       ( [#"train.adb" 82 0 0] begin ensures {true} let _ = (let _ = temp___271.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__rod_number in (
        ()))
        in () end ;
       { ( temp___271 ) with Reactor__trainreactor.__split_fields = { ( temp___271.Reactor__trainreactor.__split_fields ) with Reactor__trainreactor.rec__reactor__trainreactor__rod_number = (Reactor__rods__rep.of_rep(([#"train.adb" 82 0 0] ( [@GP_Id:17] [@vc:annotation] [@comment:         This.reac.rod_number := This.reac.rod_number - 1;                                                       ^ train.adb:82:55:VC_RANGE_CHECK] [@GP_Sloc:train.adb:82:55] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:if__this_assign__sub] (Reactor__rods.range_check_(((Reactor__rods__rep.to_rep({ Train__train.__split_fields = Train__decreaserod__this.this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__reac.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__rod_number)) - (1 : int)))) )))) } } )))
       } } )))
      in (
       (Train__decreaserod__this.this__split_fields.Train__train.__split_fields__content <- ( temp___273.Train__train.__split_fields ))))
     ) );
     ( [@GP_Sloc:train.adb:83:27] ([#"train.adb" 83 0 0] ()) );
     ( [@GP_Sloc:train.adb:83:24] ([#"train.adb" 83 0 0] (let temp___276 [@mlw:proxy_symbol] [@introduced] = (let temp___275 [@mlw:proxy_symbol] [@introduced] = { Train__train.__split_fields = Train__decreaserod__this.this__split_fields.Train__train.__split_fields__content } in (
      ( [#"train.adb" 83 0 0] begin ensures {true} let _ = (let _ = temp___275.Train__train.__split_fields.Train__train.rec__train__train__reac in (
       ()))
       in () end ;
      { ( temp___275 ) with Train__train.__split_fields = { ( temp___275.Train__train.__split_fields ) with Train__train.rec__train__train__reac = (let temp___274 [@mlw:proxy_symbol] [@introduced] = { Train__train.__split_fields = Train__decreaserod__this.this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__reac in (
       ( [#"train.adb" 83 0 0] begin ensures {true} let _ = (let _ = temp___274.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__pow in (
        ()))
        in () end ;
       { ( temp___274 ) with Reactor__trainreactor.__split_fields = { ( temp___274.Reactor__trainreactor.__split_fields ) with Reactor__trainreactor.rec__reactor__trainreactor__pow = (Reactor__power__rep.of_rep((Reactor__calculatepower___axiom.calculatepower({ Train__train.__split_fields = Train__decreaserod__this.this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__reac)))) } } )))
       } } )))
      in (
      [#"train.adb" 83 0 0] (Train__decreaserod__this.this__split_fields.Train__train.__split_fields__content <- ( temp___276.Train__train.__split_fields ))))
     ) );
     ( [@GP_Sloc:train.adb:84:21] ([#"train.adb" 84 0 0] ()) );
     ( [@GP_Sloc:train.adb:84:18] ([#"train.adb" 84 0 0] (let temp___278 [@mlw:proxy_symbol] [@introduced] = (let temp___277 [@mlw:proxy_symbol] [@introduced] = { Train__train.__split_fields = Train__decreaserod__this.this__split_fields.Train__train.__split_fields__content } in (
      ( [#"train.adb" 84 0 0] begin ensures {true} let _ = (let _ = temp___277.Train__train.__split_fields.Train__train.rec__train__train__sp in (
       ()))
       in () end ;
      { ( temp___277 ) with Train__train.__split_fields = { ( temp___277.Train__train.__split_fields ) with Train__train.rec__train__train__sp = (Train__speed__rep.of_rep(([#"train.adb" 84 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Id:18] [@vc:annotation] [@GP_Shape:if__this_assign__call_calculatespeed] [@comment:         This.sp := calculateSpeed(This);                     ^ train.adb:84:21:VC_PRECONDITION] [@GP_Sloc:train.adb:84:21] (Train__calculatespeed___axiom.calculatespeed({ Train__train.__split_fields = Train__decreaserod__this.this__split_fields.Train__train.__split_fields__content })) )))) } } )))
      in (
       (Train__decreaserod__this.this__split_fields.Train__train.__split_fields__content <- ( temp___278.Train__train.__split_fields ))))
     ) );
     ( [@GP_Sloc:train.adb:85:28] ([#"train.adb" 85 0 0] ()) );
     ( [@GP_Sloc:train.adb:85:25] ([#"train.adb" 85 0 0] (let temp___281 [@mlw:proxy_symbol] [@introduced] = (let temp___280 [@mlw:proxy_symbol] [@introduced] = { Train__train.__split_fields = Train__decreaserod__this.this__split_fields.Train__train.__split_fields__content } in (
      ( [#"train.adb" 85 0 0] begin ensures {true} let _ = (let _ = temp___280.Train__train.__split_fields.Train__train.rec__train__train__reac in (
       ()))
       in () end ;
      { ( temp___280 ) with Train__train.__split_fields = { ( temp___280.Train__train.__split_fields ) with Train__train.rec__train__train__reac = (let temp___279 [@mlw:proxy_symbol] [@introduced] = { Train__train.__split_fields = Train__decreaserod__this.this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__reac in (
       ( [#"train.adb" 85 0 0] begin ensures {true} let _ = (let _ = temp___279.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__temp in (
        ()))
        in () end ;
       { ( temp___279 ) with Reactor__trainreactor.__split_fields = { ( temp___279.Reactor__trainreactor.__split_fields ) with Reactor__trainreactor.rec__reactor__trainreactor__temp = (Reactor__temperature__rep.of_rep(([#"train.adb" 85 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Id:19] [@vc:annotation] [@GP_Sloc:train.adb:85:28] [@GP_Shape:if__this_assign__call_calctemp] [@comment:         This.reac.temp := calcTemp(This);                            ^ train.adb:85:28:VC_PRECONDITION] (Train__calctemp___axiom.calctemp({ Train__train.__split_fields = Train__decreaserod__this.this__split_fields.Train__train.__split_fields__content })) )))) } } )))
       } } )))
      in (
       (Train__decreaserod__this.this__split_fields.Train__train.__split_fields__content <- ( temp___281.Train__train.__split_fields ))))
     ) ) )) else (
     ()))) );
     raise Return__exc )
   with
    Return__exc -> ()
   end;
    begin ensures {true} let _ = (let _ = ((Reactor__rods__rep.to_rep({ Train__train.__split_fields = Train__decreaserod__this.this__split_fields.Train__train.__split_fields__content }.Train__train.__split_fields.Train__train.rec__train__train__reac.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__rod_number)) < temp___old_282) in (
    ()))
    in () end  )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "calculateweight" defined at train.ads:47, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Train__calculateweight__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Train__train as Train__train
 use        Train__train___axiom as Train__train___axiom
 use        Train__calculateweight__this as Train__calculateweight__this
 use        Reactor__trainreactor as Reactor__trainreactor
 use        Train__calculateweight__ret as Train__calculateweight__ret
 use        Train__weight as Train__weight
 use        Train__weight___axiom as Train__weight___axiom
 use        Train__weight__rep as Train__weight__rep
 use        Train__carriage as Train__carriage
 use        Train__carriage__rep as Train__carriage__rep
 use        Reactor__statusonoff as Reactor__statusonoff
 use        Reactor__statusonoff__rep as Reactor__statusonoff__rep
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Train__calculateweight__ret___axiom as Train__calculateweight__ret___axiom
 use        Train__speed___axiom as Train__speed___axiom
 use        Train__weight___axiom as Train__weight___axiom
 use        Train__carriage___axiom as Train__carriage___axiom
 use        Train__train___axiom as Train__train___axiom
 use        Train__calculateweight__this___axiom as Train__calculateweight__this___axiom
 use        Reactor__power___axiom as Reactor__power___axiom
 use        Reactor__rods___axiom as Reactor__rods___axiom
 use        Reactor__statusonoff___axiom as Reactor__statusonoff___axiom
 use        Reactor__reactorstatus___axiom as Reactor__reactorstatus___axiom
 use        Reactor__temperature___axiom as Reactor__temperature___axiom
 use        Reactor__trainreactor___axiom as Reactor__trainreactor___axiom

 val train__calculateweight__result [@model_projected] [@model_trace:3220@result] [@name:calculateWeight]  : int__ref 
 
 let def [#"train.ads" 47 0 0][@GP_Subp:train.ads:47] 
   (__void_param : unit)
  requires { [#"train.ads" 47 0 0] true }
  ensures { [#"train.ads" 47 0 0] ([#"train.ads" 49 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@comment:     Post => calculateWeight'Result >= ReactorWeight and calculateWeight'Result <= Weight'Last;              ^ train.ads:49:14:VC_POSTCONDITION] [@model_vc_post] [@GP_Sloc:train.ads:49:14] [@GP_Id:24] [@GP_Shape:pragargs__and] ( ( [@GP_Sloc:train.ads:49:14] [@GP_Pretty_Ada:3273] (train__calculateweight__result.int__content >= (2000 : int)) ) /\ ( [@GP_Sloc:train.ads:49:58] [@GP_Pretty_Ada:3279] (train__calculateweight__result.int__content <= (22000 : int)) ) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram train.ads:47 *)
  ;
   assume {  (Train__train___axiom.dynamic_invariant Train__calculateweight__this.this True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram train.ads:47 *)
  ;
  () (* Check for RTE in the Pre of the subprogram train.ads:47 *)
  ;
   begin ensures {true} let _ = (let _ = (Boolean.andb((Boolean.andb(((Reactor__statusonoff__rep.to_rep(Train__calculateweight__this.this.Train__train.__split_fields.Train__train.rec__train__train__reac.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__onoff)) = (1 : int))) (((Train__weight__rep.to_rep(Train__calculateweight__this.this.Train__train.__split_fields.Train__train.rec__train__train__wei)) >= (2000 : int))))) (((Train__weight__rep.to_rep(Train__calculateweight__this.this.Train__train.__split_fields.Train__train.rec__train__train__wei)) <= (22000 : int)))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram train.ads:47 *)
  ;
   assume {  ( ( ( [@GP_Pretty_Ada:3249] ((Reactor__statusonoff__rep.to_rep Train__calculateweight__this.this.Train__train.__split_fields.Train__train.rec__train__train__reac.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__onoff) = (1 : int)) ) /\ ( [@GP_Pretty_Ada:3255] ((Train__weight__rep.to_rep Train__calculateweight__this.this.Train__train.__split_fields.Train__train.rec__train__train__wei) >= (2000 : int)) ) ) /\ ( [@GP_Pretty_Ada:3263] ((Train__weight__rep.to_rep Train__calculateweight__this.this.Train__train.__split_fields.Train__train.rec__train__train__wei) <= (22000 : int)) ) ) };
   try
   ( ();
   ([#"train.adb" 97 0 0] ( [#"train.adb" 97 0 0] assume { [#"train.adb" 97 0 0] (Train__weight___axiom.default_initial_assumption Train__calculateweight__ret.ret.int__content False) };
   [#"train.adb" 97 0 0] assume { [#"train.adb" 97 0 0] (Train__weight___axiom.dynamic_invariant Train__calculateweight__ret.ret.int__content False False True True) } ));
   ();
   ( [@GP_Sloc:train.adb:106:7] ([#"train.adb" 106 0 0] (if (( ([#"train.adb" 106 0 0] [#"train.adb" 106 0 0] (([@branch_id=2717] Main.spark__branch).bool__content <- ( ((Train__carriage__rep.to_rep(Train__calculateweight__this.this.Train__train.__split_fields.Train__train.rec__train__train__numbcarri)) = (0 : int)) )));
   ( [@branch_id=2717] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:train.adb:107:10] ([#"train.adb" 107 0 0] ()) );
    ( [@GP_Sloc:train.adb:107:14] ([#"train.adb" 107 0 0] [#"train.adb" 107 0 0] (Train__calculateweight__ret.ret.int__content <- ( (2000 : int) ))) ) )) else (
    ( ();
    ( [@GP_Sloc:train.adb:109:10] ([#"train.adb" 109 0 0] ()) );
    ( [@GP_Sloc:train.adb:109:14] ([#"train.adb" 109 0 0] [#"train.adb" 109 0 0] (Train__calculateweight__ret.ret.int__content <- ( ([#"train.adb" 109 0 0] ( [@GP_Shape:if__ret_assign__add] [@vc:annotation] [@comment:         ret :=  ReactorWeight + Weight(Integer(CarriageWeight) * Integer(this.numbCarri));                                ^ train.adb:109:32:VC_RANGE_CHECK] [@GP_Sloc:train.adb:109:32] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:23] (Train__weight.range_check_(((2000 : int) + ([#"train.adb" 109 0 0] ( [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:22] [@GP_Sloc:train.adb:109:65] [@comment:         ret :=  ReactorWeight + Weight(Integer(CarriageWeight) * Integer(this.numbCarri));                                                                 ^ train.adb:109:65:VC_RANGE_CHECK] [@GP_Shape:if__ret_assign__add__typeconv__mult] (Train__weight.range_check_(([#"train.adb" 109 0 0] ( [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:         ret :=  ReactorWeight + Weight(Integer(CarriageWeight) * Integer(this.numbCarri));                                                                 ^ train.adb:109:65:VC_OVERFLOW_CHECK] [@GP_Id:21] [@GP_Sloc:train.adb:109:65] [@GP_Shape:if__ret_assign__add__typeconv__mult] (Standard__integer.range_check_(((2000 : int) * (Train__carriage__rep.to_rep(Train__calculateweight__this.this.Train__train.__split_fields.Train__train.rec__train__train__numbcarri))))) )))) ))))) )) ))) ) )))) );
   ( [@GP_Sloc:train.adb:112:14] ([#"train.adb" 112 0 0] ()) );
   ( [@GP_Sloc:train.adb:112:7] ([#"train.adb" 112 0 0] ( [#"train.adb" 112 0 0] (train__calculateweight__result.int__content <- ( Train__calculateweight__ret.ret.int__content ));
   [#"train.adb" 112 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = (Boolean.andb((train__calculateweight__result.int__content >= (2000 : int))) ((train__calculateweight__result.int__content <= (22000 : int)))) in (
   ()))
   in () end ;
  train__calculateweight__result.int__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "calctemp" defined at train.ads:51, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Train__calctemp__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Boolean as Boolean
 use        Train__train as Train__train
 use        Train__train___axiom as Train__train___axiom
 use        Train__calctemp__this as Train__calctemp__this
 use        Reactor__trainreactor as Reactor__trainreactor
 use        Train__calctemp__tempe as Train__calctemp__tempe
 use        Reactor__TtemperatureB as Reactor__TtemperatureB
 use        Reactor__temperature as Reactor__temperature
 use        Reactor__temperature___axiom as Reactor__temperature___axiom
 use        Reactor__temperature__rep as Reactor__temperature__rep
 use        Reactor__rods as Reactor__rods
 use        Reactor__rods__rep as Reactor__rods__rep
 use        Train__calctemp__tempe___axiom as Train__calctemp__tempe___axiom
 use        Train__speed___axiom as Train__speed___axiom
 use        Train__weight___axiom as Train__weight___axiom
 use        Train__carriage___axiom as Train__carriage___axiom
 use        Train__train___axiom as Train__train___axiom
 use        Train__calctemp__this___axiom as Train__calctemp__this___axiom
 use        Reactor__power___axiom as Reactor__power___axiom
 use        Reactor__rods___axiom as Reactor__rods___axiom
 use        Reactor__statusonoff___axiom as Reactor__statusonoff___axiom
 use        Reactor__reactorstatus___axiom as Reactor__reactorstatus___axiom
 use        Reactor__temperature___axiom as Reactor__temperature___axiom
 use        Reactor__trainreactor___axiom as Reactor__trainreactor___axiom
 use        Reactor__TtemperatureB___axiom as Reactor__TtemperatureB___axiom

 val train__calctemp__result [@model_projected] [@model_trace:3282@result] [@name:calcTemp]  : int__ref 
 
 let def [#"train.ads" 51 0 0][@GP_Subp:train.ads:51] 
   (__void_param : unit)
  requires { [#"train.ads" 51 0 0] true }
  ensures { [#"train.ads" 51 0 0] ([#"train.ads" 53 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Sloc:train.ads:53:14] [@comment:     Post => calcTemp'Result >= Temperature'First and calcTemp'Result <= Temperature'Last;              ^ train.ads:53:14:VC_POSTCONDITION] [@model_vc_post] [@GP_Shape:pragargs__and] [@GP_Id:27] ( ( [@GP_Pretty_Ada:3331] [@GP_Sloc:train.ads:53:14] (train__calctemp__result.int__content >= (0 : int)) ) /\ ( [@GP_Sloc:train.ads:53:55] [@GP_Pretty_Ada:3339] (train__calctemp__result.int__content <= (100 : int)) ) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram train.ads:51 *)
  ;
   assume {  (Train__train___axiom.dynamic_invariant Train__calctemp__this.this True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram train.ads:51 *)
  ;
  () (* Check for RTE in the Pre of the subprogram train.ads:51 *)
  ;
   begin ensures {true} let _ = (let _ = (Boolean.andb(((Reactor__temperature__rep.to_rep(Train__calctemp__this.this.Train__train.__split_fields.Train__train.rec__train__train__reac.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__temp)) >= (0 : int))) (((Reactor__temperature__rep.to_rep(Train__calctemp__this.this.Train__train.__split_fields.Train__train.rec__train__train__reac.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__temp)) <= (100 : int)))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram train.ads:51 *)
  ;
   assume {  ( ( [@GP_Pretty_Ada:3311] ((Reactor__temperature__rep.to_rep Train__calctemp__this.this.Train__train.__split_fields.Train__train.rec__train__train__reac.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__temp) >= (0 : int)) ) /\ ( [@GP_Pretty_Ada:3321] ((Reactor__temperature__rep.to_rep Train__calctemp__this.this.Train__train.__split_fields.Train__train.rec__train__train__reac.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__temp) <= (100 : int)) ) ) };
   try
   ( ();
   ([#"train.adb" 117 0 0] ( [#"train.adb" 117 0 0] assume { [#"train.adb" 117 0 0] (Reactor__temperature___axiom.default_initial_assumption Train__calctemp__tempe.tempe.int__content False) };
   [#"train.adb" 117 0 0] assume { [#"train.adb" 117 0 0] (Reactor__temperature___axiom.dynamic_invariant Train__calctemp__tempe.tempe.int__content False False True True) } ));
   ();
   ( [@GP_Sloc:train.adb:119:7] ([#"train.adb" 119 0 0] ()) );
   ( [@GP_Sloc:train.adb:119:13] ([#"train.adb" 119 0 0] [#"train.adb" 119 0 0] (Train__calctemp__tempe.tempe.int__content <- ( ([#"train.adb" 119 0 0] ( [@comment:      tempe := Temperature'Last / Temperature(Rods'Last) * Temperature(This.reac.rod_number);                                                          ^ train.adb:119:58:VC_RANGE_CHECK] [@GP_Sloc:train.adb:119:58] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:tempe_assign__mult] [@GP_Id:26] (Reactor__temperature.range_check_(([#"train.adb" 119 0 0] ( [@GP_Sloc:train.adb:119:58] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:tempe_assign__mult] [@GP_Id:25] [@comment:      tempe := Temperature'Last / Temperature(Rods'Last) * Temperature(This.reac.rod_number);                                                          ^ train.adb:119:58:VC_OVERFLOW_CHECK] (Reactor__TtemperatureB.range_check_(((20 : int) * (Reactor__rods__rep.to_rep(Train__calctemp__this.this.Train__train.__split_fields.Train__train.rec__train__train__reac.Reactor__trainreactor.__split_fields.Reactor__trainreactor.rec__reactor__trainreactor__rod_number))))) )))) )) ))) );
   ( [@GP_Sloc:train.adb:121:14] ([#"train.adb" 121 0 0] ()) );
   ( [@GP_Sloc:train.adb:121:7] ([#"train.adb" 121 0 0] ( [#"train.adb" 121 0 0] (train__calctemp__result.int__content <- ( Train__calctemp__tempe.tempe.int__content ));
   [#"train.adb" 121 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = (Boolean.andb((train__calctemp__result.int__content >= (0 : int))) ((train__calctemp__result.int__content <= (100 : int)))) in (
   ()))
   in () end ;
  train__calctemp__result.int__content )
end
